// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol_account.proto

#include "protocol_account.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace Protocol {
class C2S_AccountLoginDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<C2S_AccountLogin> _instance;
} _C2S_AccountLogin_default_instance_;
class S2C_AccountLoginDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<S2C_AccountLogin> _instance;
} _S2C_AccountLogin_default_instance_;
class C2S_AccountCreateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<C2S_AccountCreate> _instance;
} _C2S_AccountCreate_default_instance_;
class S2C_AccountCreateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<S2C_AccountCreate> _instance;
} _S2C_AccountCreate_default_instance_;
class C2S_AccountLoadDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<C2S_AccountLoad> _instance;
} _C2S_AccountLoad_default_instance_;
class S2C_AccountLoadDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<S2C_AccountLoad> _instance;
} _S2C_AccountLoad_default_instance_;
class C2S_AccountAskOpenidDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<C2S_AccountAskOpenid> _instance;
} _C2S_AccountAskOpenid_default_instance_;
class S2C_AccountAskOpenidDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<S2C_AccountAskOpenid> _instance;
} _S2C_AccountAskOpenid_default_instance_;
class C2S_AccountUpdateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<C2S_AccountUpdate> _instance;
} _C2S_AccountUpdate_default_instance_;
class S2C_AccountUpdateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<S2C_AccountUpdate> _instance;
} _S2C_AccountUpdate_default_instance_;
}  // namespace Protocol
static void InitDefaultsscc_info_C2S_AccountAskOpenid_protocol_5faccount_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Protocol::_C2S_AccountAskOpenid_default_instance_;
    new (ptr) ::Protocol::C2S_AccountAskOpenid();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Protocol::C2S_AccountAskOpenid::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_C2S_AccountAskOpenid_protocol_5faccount_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_C2S_AccountAskOpenid_protocol_5faccount_2eproto}, {}};

static void InitDefaultsscc_info_C2S_AccountCreate_protocol_5faccount_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Protocol::_C2S_AccountCreate_default_instance_;
    new (ptr) ::Protocol::C2S_AccountCreate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Protocol::C2S_AccountCreate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_C2S_AccountCreate_protocol_5faccount_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_C2S_AccountCreate_protocol_5faccount_2eproto}, {}};

static void InitDefaultsscc_info_C2S_AccountLoad_protocol_5faccount_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Protocol::_C2S_AccountLoad_default_instance_;
    new (ptr) ::Protocol::C2S_AccountLoad();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Protocol::C2S_AccountLoad::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_C2S_AccountLoad_protocol_5faccount_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_C2S_AccountLoad_protocol_5faccount_2eproto}, {}};

static void InitDefaultsscc_info_C2S_AccountLogin_protocol_5faccount_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Protocol::_C2S_AccountLogin_default_instance_;
    new (ptr) ::Protocol::C2S_AccountLogin();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Protocol::C2S_AccountLogin::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_C2S_AccountLogin_protocol_5faccount_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_C2S_AccountLogin_protocol_5faccount_2eproto}, {}};

static void InitDefaultsscc_info_C2S_AccountUpdate_protocol_5faccount_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Protocol::_C2S_AccountUpdate_default_instance_;
    new (ptr) ::Protocol::C2S_AccountUpdate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Protocol::C2S_AccountUpdate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_C2S_AccountUpdate_protocol_5faccount_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_C2S_AccountUpdate_protocol_5faccount_2eproto}, {}};

static void InitDefaultsscc_info_S2C_AccountAskOpenid_protocol_5faccount_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Protocol::_S2C_AccountAskOpenid_default_instance_;
    new (ptr) ::Protocol::S2C_AccountAskOpenid();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Protocol::S2C_AccountAskOpenid::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_S2C_AccountAskOpenid_protocol_5faccount_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_S2C_AccountAskOpenid_protocol_5faccount_2eproto}, {}};

static void InitDefaultsscc_info_S2C_AccountCreate_protocol_5faccount_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Protocol::_S2C_AccountCreate_default_instance_;
    new (ptr) ::Protocol::S2C_AccountCreate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Protocol::S2C_AccountCreate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_S2C_AccountCreate_protocol_5faccount_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_S2C_AccountCreate_protocol_5faccount_2eproto}, {}};

static void InitDefaultsscc_info_S2C_AccountLoad_protocol_5faccount_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Protocol::_S2C_AccountLoad_default_instance_;
    new (ptr) ::Protocol::S2C_AccountLoad();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Protocol::S2C_AccountLoad::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_S2C_AccountLoad_protocol_5faccount_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_S2C_AccountLoad_protocol_5faccount_2eproto}, {}};

static void InitDefaultsscc_info_S2C_AccountLogin_protocol_5faccount_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Protocol::_S2C_AccountLogin_default_instance_;
    new (ptr) ::Protocol::S2C_AccountLogin();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Protocol::S2C_AccountLogin::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_S2C_AccountLogin_protocol_5faccount_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_S2C_AccountLogin_protocol_5faccount_2eproto}, {}};

static void InitDefaultsscc_info_S2C_AccountUpdate_protocol_5faccount_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Protocol::_S2C_AccountUpdate_default_instance_;
    new (ptr) ::Protocol::S2C_AccountUpdate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Protocol::S2C_AccountUpdate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_S2C_AccountUpdate_protocol_5faccount_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_S2C_AccountUpdate_protocol_5faccount_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_protocol_5faccount_2eproto[10];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_protocol_5faccount_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_protocol_5faccount_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_protocol_5faccount_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C2S_AccountLogin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::C2S_AccountLogin, game_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C2S_AccountLogin, openid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_AccountLogin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_AccountLogin, ret_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_AccountLogin, role_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C2S_AccountCreate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::C2S_AccountCreate, game_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C2S_AccountCreate, openid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_AccountCreate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_AccountCreate, ret_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_AccountCreate, role_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C2S_AccountLoad, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::C2S_AccountLoad, game_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C2S_AccountLoad, role_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_AccountLoad, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_AccountLoad, ret_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_AccountLoad, role_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C2S_AccountAskOpenid, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::C2S_AccountAskOpenid, game_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C2S_AccountAskOpenid, code_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C2S_AccountAskOpenid, anonymous_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_AccountAskOpenid, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_AccountAskOpenid, ret_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_AccountAskOpenid, openid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C2S_AccountUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::C2S_AccountUpdate, game_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C2S_AccountUpdate, role_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C2S_AccountUpdate, name_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C2S_AccountUpdate, avatarurl_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C2S_AccountUpdate, country_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C2S_AccountUpdate, city_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_AccountUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_AccountUpdate, ret_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Protocol::C2S_AccountLogin)},
  { 7, -1, sizeof(::Protocol::S2C_AccountLogin)},
  { 14, -1, sizeof(::Protocol::C2S_AccountCreate)},
  { 21, -1, sizeof(::Protocol::S2C_AccountCreate)},
  { 28, -1, sizeof(::Protocol::C2S_AccountLoad)},
  { 35, -1, sizeof(::Protocol::S2C_AccountLoad)},
  { 42, -1, sizeof(::Protocol::C2S_AccountAskOpenid)},
  { 50, -1, sizeof(::Protocol::S2C_AccountAskOpenid)},
  { 57, -1, sizeof(::Protocol::C2S_AccountUpdate)},
  { 68, -1, sizeof(::Protocol::S2C_AccountUpdate)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_C2S_AccountLogin_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_S2C_AccountLogin_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_C2S_AccountCreate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_S2C_AccountCreate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_C2S_AccountLoad_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_S2C_AccountLoad_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_C2S_AccountAskOpenid_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_S2C_AccountAskOpenid_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_C2S_AccountUpdate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_S2C_AccountUpdate_default_instance_),
};

const char descriptor_table_protodef_protocol_5faccount_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026protocol_account.proto\022\010Protocol\"3\n\020C2"
  "S_AccountLogin\022\017\n\007game_id\030\001 \001(\005\022\016\n\006openi"
  "d\030\002 \001(\t\"0\n\020S2C_AccountLogin\022\013\n\003ret\030\001 \001(\005"
  "\022\017\n\007role_id\030\002 \001(\003\"4\n\021C2S_AccountCreate\022\017"
  "\n\007game_id\030\001 \001(\005\022\016\n\006openid\030\002 \001(\t\"1\n\021S2C_A"
  "ccountCreate\022\013\n\003ret\030\001 \001(\005\022\017\n\007role_id\030\002 \001"
  "(\003\"3\n\017C2S_AccountLoad\022\017\n\007game_id\030\001 \001(\005\022\017"
  "\n\007role_id\030\002 \001(\003\"/\n\017S2C_AccountLoad\022\013\n\003re"
  "t\030\001 \001(\005\022\017\n\007role_id\030\002 \001(\003\"M\n\024C2S_AccountA"
  "skOpenid\022\017\n\007game_id\030\001 \001(\005\022\014\n\004code\030\002 \001(\t\022"
  "\026\n\016anonymous_code\030\003 \001(\t\"3\n\024S2C_AccountAs"
  "kOpenid\022\013\n\003ret\030\001 \001(\005\022\016\n\006openid\030\002 \001(\t\"u\n\021"
  "C2S_AccountUpdate\022\017\n\007game_id\030\001 \001(\005\022\017\n\007ro"
  "le_id\030\002 \001(\t\022\014\n\004name\030\003 \001(\t\022\021\n\tavatarurl\030\004"
  " \001(\t\022\017\n\007country\030\005 \001(\t\022\014\n\004city\030\006 \001(\t\" \n\021S"
  "2C_AccountUpdate\022\013\n\003ret\030\001 \001(\005b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_protocol_5faccount_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_protocol_5faccount_2eproto_sccs[10] = {
  &scc_info_C2S_AccountAskOpenid_protocol_5faccount_2eproto.base,
  &scc_info_C2S_AccountCreate_protocol_5faccount_2eproto.base,
  &scc_info_C2S_AccountLoad_protocol_5faccount_2eproto.base,
  &scc_info_C2S_AccountLogin_protocol_5faccount_2eproto.base,
  &scc_info_C2S_AccountUpdate_protocol_5faccount_2eproto.base,
  &scc_info_S2C_AccountAskOpenid_protocol_5faccount_2eproto.base,
  &scc_info_S2C_AccountCreate_protocol_5faccount_2eproto.base,
  &scc_info_S2C_AccountLoad_protocol_5faccount_2eproto.base,
  &scc_info_S2C_AccountLogin_protocol_5faccount_2eproto.base,
  &scc_info_S2C_AccountUpdate_protocol_5faccount_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_protocol_5faccount_2eproto_once;
static bool descriptor_table_protocol_5faccount_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protocol_5faccount_2eproto = {
  &descriptor_table_protocol_5faccount_2eproto_initialized, descriptor_table_protodef_protocol_5faccount_2eproto, "protocol_account.proto", 637,
  &descriptor_table_protocol_5faccount_2eproto_once, descriptor_table_protocol_5faccount_2eproto_sccs, descriptor_table_protocol_5faccount_2eproto_deps, 10, 0,
  schemas, file_default_instances, TableStruct_protocol_5faccount_2eproto::offsets,
  file_level_metadata_protocol_5faccount_2eproto, 10, file_level_enum_descriptors_protocol_5faccount_2eproto, file_level_service_descriptors_protocol_5faccount_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_protocol_5faccount_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_protocol_5faccount_2eproto), true);
namespace Protocol {

// ===================================================================

void C2S_AccountLogin::InitAsDefaultInstance() {
}
class C2S_AccountLogin::_Internal {
 public:
};

C2S_AccountLogin::C2S_AccountLogin()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Protocol.C2S_AccountLogin)
}
C2S_AccountLogin::C2S_AccountLogin(const C2S_AccountLogin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  openid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_openid().empty()) {
    openid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.openid_);
  }
  game_id_ = from.game_id_;
  // @@protoc_insertion_point(copy_constructor:Protocol.C2S_AccountLogin)
}

void C2S_AccountLogin::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_C2S_AccountLogin_protocol_5faccount_2eproto.base);
  openid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  game_id_ = 0;
}

C2S_AccountLogin::~C2S_AccountLogin() {
  // @@protoc_insertion_point(destructor:Protocol.C2S_AccountLogin)
  SharedDtor();
}

void C2S_AccountLogin::SharedDtor() {
  openid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void C2S_AccountLogin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const C2S_AccountLogin& C2S_AccountLogin::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_C2S_AccountLogin_protocol_5faccount_2eproto.base);
  return *internal_default_instance();
}


void C2S_AccountLogin::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C2S_AccountLogin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  openid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  game_id_ = 0;
  _internal_metadata_.Clear();
}

const char* C2S_AccountLogin::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 game_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string openid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_openid(), ptr, ctx, "Protocol.C2S_AccountLogin.openid");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* C2S_AccountLogin::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C2S_AccountLogin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 game_id = 1;
  if (this->game_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_game_id(), target);
  }

  // string openid = 2;
  if (this->openid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_openid().data(), static_cast<int>(this->_internal_openid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.C2S_AccountLogin.openid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_openid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C2S_AccountLogin)
  return target;
}

size_t C2S_AccountLogin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C2S_AccountLogin)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string openid = 2;
  if (this->openid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_openid());
  }

  // int32 game_id = 1;
  if (this->game_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_game_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void C2S_AccountLogin::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.C2S_AccountLogin)
  GOOGLE_DCHECK_NE(&from, this);
  const C2S_AccountLogin* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<C2S_AccountLogin>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.C2S_AccountLogin)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.C2S_AccountLogin)
    MergeFrom(*source);
  }
}

void C2S_AccountLogin::MergeFrom(const C2S_AccountLogin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C2S_AccountLogin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.openid().size() > 0) {

    openid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.openid_);
  }
  if (from.game_id() != 0) {
    _internal_set_game_id(from._internal_game_id());
  }
}

void C2S_AccountLogin::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.C2S_AccountLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_AccountLogin::CopyFrom(const C2S_AccountLogin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C2S_AccountLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_AccountLogin::IsInitialized() const {
  return true;
}

void C2S_AccountLogin::InternalSwap(C2S_AccountLogin* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  openid_.Swap(&other->openid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(game_id_, other->game_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C2S_AccountLogin::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void S2C_AccountLogin::InitAsDefaultInstance() {
}
class S2C_AccountLogin::_Internal {
 public:
};

S2C_AccountLogin::S2C_AccountLogin()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Protocol.S2C_AccountLogin)
}
S2C_AccountLogin::S2C_AccountLogin(const S2C_AccountLogin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&role_id_, &from.role_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&role_id_)) + sizeof(ret_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S2C_AccountLogin)
}

void S2C_AccountLogin::SharedCtor() {
  ::memset(&role_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&role_id_)) + sizeof(ret_));
}

S2C_AccountLogin::~S2C_AccountLogin() {
  // @@protoc_insertion_point(destructor:Protocol.S2C_AccountLogin)
  SharedDtor();
}

void S2C_AccountLogin::SharedDtor() {
}

void S2C_AccountLogin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const S2C_AccountLogin& S2C_AccountLogin::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_S2C_AccountLogin_protocol_5faccount_2eproto.base);
  return *internal_default_instance();
}


void S2C_AccountLogin::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S2C_AccountLogin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&role_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&role_id_)) + sizeof(ret_));
  _internal_metadata_.Clear();
}

const char* S2C_AccountLogin::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ret = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 role_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          role_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S2C_AccountLogin::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S2C_AccountLogin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ret = 1;
  if (this->ret() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ret(), target);
  }

  // int64 role_id = 2;
  if (this->role_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_role_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S2C_AccountLogin)
  return target;
}

size_t S2C_AccountLogin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S2C_AccountLogin)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 role_id = 2;
  if (this->role_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_role_id());
  }

  // int32 ret = 1;
  if (this->ret() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ret());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S2C_AccountLogin::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.S2C_AccountLogin)
  GOOGLE_DCHECK_NE(&from, this);
  const S2C_AccountLogin* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S2C_AccountLogin>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.S2C_AccountLogin)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.S2C_AccountLogin)
    MergeFrom(*source);
  }
}

void S2C_AccountLogin::MergeFrom(const S2C_AccountLogin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S2C_AccountLogin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.role_id() != 0) {
    _internal_set_role_id(from._internal_role_id());
  }
  if (from.ret() != 0) {
    _internal_set_ret(from._internal_ret());
  }
}

void S2C_AccountLogin::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.S2C_AccountLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_AccountLogin::CopyFrom(const S2C_AccountLogin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S2C_AccountLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_AccountLogin::IsInitialized() const {
  return true;
}

void S2C_AccountLogin::InternalSwap(S2C_AccountLogin* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(role_id_, other->role_id_);
  swap(ret_, other->ret_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S2C_AccountLogin::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void C2S_AccountCreate::InitAsDefaultInstance() {
}
class C2S_AccountCreate::_Internal {
 public:
};

C2S_AccountCreate::C2S_AccountCreate()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Protocol.C2S_AccountCreate)
}
C2S_AccountCreate::C2S_AccountCreate(const C2S_AccountCreate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  openid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_openid().empty()) {
    openid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.openid_);
  }
  game_id_ = from.game_id_;
  // @@protoc_insertion_point(copy_constructor:Protocol.C2S_AccountCreate)
}

void C2S_AccountCreate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_C2S_AccountCreate_protocol_5faccount_2eproto.base);
  openid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  game_id_ = 0;
}

C2S_AccountCreate::~C2S_AccountCreate() {
  // @@protoc_insertion_point(destructor:Protocol.C2S_AccountCreate)
  SharedDtor();
}

void C2S_AccountCreate::SharedDtor() {
  openid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void C2S_AccountCreate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const C2S_AccountCreate& C2S_AccountCreate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_C2S_AccountCreate_protocol_5faccount_2eproto.base);
  return *internal_default_instance();
}


void C2S_AccountCreate::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C2S_AccountCreate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  openid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  game_id_ = 0;
  _internal_metadata_.Clear();
}

const char* C2S_AccountCreate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 game_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string openid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_openid(), ptr, ctx, "Protocol.C2S_AccountCreate.openid");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* C2S_AccountCreate::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C2S_AccountCreate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 game_id = 1;
  if (this->game_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_game_id(), target);
  }

  // string openid = 2;
  if (this->openid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_openid().data(), static_cast<int>(this->_internal_openid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.C2S_AccountCreate.openid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_openid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C2S_AccountCreate)
  return target;
}

size_t C2S_AccountCreate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C2S_AccountCreate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string openid = 2;
  if (this->openid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_openid());
  }

  // int32 game_id = 1;
  if (this->game_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_game_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void C2S_AccountCreate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.C2S_AccountCreate)
  GOOGLE_DCHECK_NE(&from, this);
  const C2S_AccountCreate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<C2S_AccountCreate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.C2S_AccountCreate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.C2S_AccountCreate)
    MergeFrom(*source);
  }
}

void C2S_AccountCreate::MergeFrom(const C2S_AccountCreate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C2S_AccountCreate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.openid().size() > 0) {

    openid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.openid_);
  }
  if (from.game_id() != 0) {
    _internal_set_game_id(from._internal_game_id());
  }
}

void C2S_AccountCreate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.C2S_AccountCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_AccountCreate::CopyFrom(const C2S_AccountCreate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C2S_AccountCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_AccountCreate::IsInitialized() const {
  return true;
}

void C2S_AccountCreate::InternalSwap(C2S_AccountCreate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  openid_.Swap(&other->openid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(game_id_, other->game_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C2S_AccountCreate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void S2C_AccountCreate::InitAsDefaultInstance() {
}
class S2C_AccountCreate::_Internal {
 public:
};

S2C_AccountCreate::S2C_AccountCreate()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Protocol.S2C_AccountCreate)
}
S2C_AccountCreate::S2C_AccountCreate(const S2C_AccountCreate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&role_id_, &from.role_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&role_id_)) + sizeof(ret_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S2C_AccountCreate)
}

void S2C_AccountCreate::SharedCtor() {
  ::memset(&role_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&role_id_)) + sizeof(ret_));
}

S2C_AccountCreate::~S2C_AccountCreate() {
  // @@protoc_insertion_point(destructor:Protocol.S2C_AccountCreate)
  SharedDtor();
}

void S2C_AccountCreate::SharedDtor() {
}

void S2C_AccountCreate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const S2C_AccountCreate& S2C_AccountCreate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_S2C_AccountCreate_protocol_5faccount_2eproto.base);
  return *internal_default_instance();
}


void S2C_AccountCreate::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S2C_AccountCreate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&role_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&role_id_)) + sizeof(ret_));
  _internal_metadata_.Clear();
}

const char* S2C_AccountCreate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ret = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 role_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          role_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S2C_AccountCreate::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S2C_AccountCreate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ret = 1;
  if (this->ret() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ret(), target);
  }

  // int64 role_id = 2;
  if (this->role_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_role_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S2C_AccountCreate)
  return target;
}

size_t S2C_AccountCreate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S2C_AccountCreate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 role_id = 2;
  if (this->role_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_role_id());
  }

  // int32 ret = 1;
  if (this->ret() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ret());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S2C_AccountCreate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.S2C_AccountCreate)
  GOOGLE_DCHECK_NE(&from, this);
  const S2C_AccountCreate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S2C_AccountCreate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.S2C_AccountCreate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.S2C_AccountCreate)
    MergeFrom(*source);
  }
}

void S2C_AccountCreate::MergeFrom(const S2C_AccountCreate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S2C_AccountCreate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.role_id() != 0) {
    _internal_set_role_id(from._internal_role_id());
  }
  if (from.ret() != 0) {
    _internal_set_ret(from._internal_ret());
  }
}

void S2C_AccountCreate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.S2C_AccountCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_AccountCreate::CopyFrom(const S2C_AccountCreate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S2C_AccountCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_AccountCreate::IsInitialized() const {
  return true;
}

void S2C_AccountCreate::InternalSwap(S2C_AccountCreate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(role_id_, other->role_id_);
  swap(ret_, other->ret_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S2C_AccountCreate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void C2S_AccountLoad::InitAsDefaultInstance() {
}
class C2S_AccountLoad::_Internal {
 public:
};

C2S_AccountLoad::C2S_AccountLoad()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Protocol.C2S_AccountLoad)
}
C2S_AccountLoad::C2S_AccountLoad(const C2S_AccountLoad& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&role_id_, &from.role_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&game_id_) -
    reinterpret_cast<char*>(&role_id_)) + sizeof(game_id_));
  // @@protoc_insertion_point(copy_constructor:Protocol.C2S_AccountLoad)
}

void C2S_AccountLoad::SharedCtor() {
  ::memset(&role_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&game_id_) -
      reinterpret_cast<char*>(&role_id_)) + sizeof(game_id_));
}

C2S_AccountLoad::~C2S_AccountLoad() {
  // @@protoc_insertion_point(destructor:Protocol.C2S_AccountLoad)
  SharedDtor();
}

void C2S_AccountLoad::SharedDtor() {
}

void C2S_AccountLoad::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const C2S_AccountLoad& C2S_AccountLoad::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_C2S_AccountLoad_protocol_5faccount_2eproto.base);
  return *internal_default_instance();
}


void C2S_AccountLoad::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C2S_AccountLoad)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&role_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&game_id_) -
      reinterpret_cast<char*>(&role_id_)) + sizeof(game_id_));
  _internal_metadata_.Clear();
}

const char* C2S_AccountLoad::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 game_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 role_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          role_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* C2S_AccountLoad::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C2S_AccountLoad)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 game_id = 1;
  if (this->game_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_game_id(), target);
  }

  // int64 role_id = 2;
  if (this->role_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_role_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C2S_AccountLoad)
  return target;
}

size_t C2S_AccountLoad::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C2S_AccountLoad)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 role_id = 2;
  if (this->role_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_role_id());
  }

  // int32 game_id = 1;
  if (this->game_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_game_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void C2S_AccountLoad::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.C2S_AccountLoad)
  GOOGLE_DCHECK_NE(&from, this);
  const C2S_AccountLoad* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<C2S_AccountLoad>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.C2S_AccountLoad)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.C2S_AccountLoad)
    MergeFrom(*source);
  }
}

void C2S_AccountLoad::MergeFrom(const C2S_AccountLoad& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C2S_AccountLoad)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.role_id() != 0) {
    _internal_set_role_id(from._internal_role_id());
  }
  if (from.game_id() != 0) {
    _internal_set_game_id(from._internal_game_id());
  }
}

void C2S_AccountLoad::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.C2S_AccountLoad)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_AccountLoad::CopyFrom(const C2S_AccountLoad& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C2S_AccountLoad)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_AccountLoad::IsInitialized() const {
  return true;
}

void C2S_AccountLoad::InternalSwap(C2S_AccountLoad* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(role_id_, other->role_id_);
  swap(game_id_, other->game_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C2S_AccountLoad::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void S2C_AccountLoad::InitAsDefaultInstance() {
}
class S2C_AccountLoad::_Internal {
 public:
};

S2C_AccountLoad::S2C_AccountLoad()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Protocol.S2C_AccountLoad)
}
S2C_AccountLoad::S2C_AccountLoad(const S2C_AccountLoad& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&role_id_, &from.role_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&role_id_)) + sizeof(ret_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S2C_AccountLoad)
}

void S2C_AccountLoad::SharedCtor() {
  ::memset(&role_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&role_id_)) + sizeof(ret_));
}

S2C_AccountLoad::~S2C_AccountLoad() {
  // @@protoc_insertion_point(destructor:Protocol.S2C_AccountLoad)
  SharedDtor();
}

void S2C_AccountLoad::SharedDtor() {
}

void S2C_AccountLoad::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const S2C_AccountLoad& S2C_AccountLoad::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_S2C_AccountLoad_protocol_5faccount_2eproto.base);
  return *internal_default_instance();
}


void S2C_AccountLoad::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S2C_AccountLoad)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&role_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&role_id_)) + sizeof(ret_));
  _internal_metadata_.Clear();
}

const char* S2C_AccountLoad::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ret = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 role_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          role_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S2C_AccountLoad::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S2C_AccountLoad)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ret = 1;
  if (this->ret() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ret(), target);
  }

  // int64 role_id = 2;
  if (this->role_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_role_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S2C_AccountLoad)
  return target;
}

size_t S2C_AccountLoad::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S2C_AccountLoad)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 role_id = 2;
  if (this->role_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_role_id());
  }

  // int32 ret = 1;
  if (this->ret() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ret());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S2C_AccountLoad::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.S2C_AccountLoad)
  GOOGLE_DCHECK_NE(&from, this);
  const S2C_AccountLoad* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S2C_AccountLoad>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.S2C_AccountLoad)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.S2C_AccountLoad)
    MergeFrom(*source);
  }
}

void S2C_AccountLoad::MergeFrom(const S2C_AccountLoad& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S2C_AccountLoad)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.role_id() != 0) {
    _internal_set_role_id(from._internal_role_id());
  }
  if (from.ret() != 0) {
    _internal_set_ret(from._internal_ret());
  }
}

void S2C_AccountLoad::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.S2C_AccountLoad)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_AccountLoad::CopyFrom(const S2C_AccountLoad& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S2C_AccountLoad)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_AccountLoad::IsInitialized() const {
  return true;
}

void S2C_AccountLoad::InternalSwap(S2C_AccountLoad* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(role_id_, other->role_id_);
  swap(ret_, other->ret_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S2C_AccountLoad::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void C2S_AccountAskOpenid::InitAsDefaultInstance() {
}
class C2S_AccountAskOpenid::_Internal {
 public:
};

C2S_AccountAskOpenid::C2S_AccountAskOpenid()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Protocol.C2S_AccountAskOpenid)
}
C2S_AccountAskOpenid::C2S_AccountAskOpenid(const C2S_AccountAskOpenid& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_code().empty()) {
    code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  anonymous_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_anonymous_code().empty()) {
    anonymous_code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.anonymous_code_);
  }
  game_id_ = from.game_id_;
  // @@protoc_insertion_point(copy_constructor:Protocol.C2S_AccountAskOpenid)
}

void C2S_AccountAskOpenid::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_C2S_AccountAskOpenid_protocol_5faccount_2eproto.base);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  anonymous_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  game_id_ = 0;
}

C2S_AccountAskOpenid::~C2S_AccountAskOpenid() {
  // @@protoc_insertion_point(destructor:Protocol.C2S_AccountAskOpenid)
  SharedDtor();
}

void C2S_AccountAskOpenid::SharedDtor() {
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  anonymous_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void C2S_AccountAskOpenid::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const C2S_AccountAskOpenid& C2S_AccountAskOpenid::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_C2S_AccountAskOpenid_protocol_5faccount_2eproto.base);
  return *internal_default_instance();
}


void C2S_AccountAskOpenid::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C2S_AccountAskOpenid)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  anonymous_code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  game_id_ = 0;
  _internal_metadata_.Clear();
}

const char* C2S_AccountAskOpenid::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 game_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_code(), ptr, ctx, "Protocol.C2S_AccountAskOpenid.code");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string anonymous_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_anonymous_code(), ptr, ctx, "Protocol.C2S_AccountAskOpenid.anonymous_code");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* C2S_AccountAskOpenid::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C2S_AccountAskOpenid)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 game_id = 1;
  if (this->game_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_game_id(), target);
  }

  // string code = 2;
  if (this->code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.C2S_AccountAskOpenid.code");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_code(), target);
  }

  // string anonymous_code = 3;
  if (this->anonymous_code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_anonymous_code().data(), static_cast<int>(this->_internal_anonymous_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.C2S_AccountAskOpenid.anonymous_code");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_anonymous_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C2S_AccountAskOpenid)
  return target;
}

size_t C2S_AccountAskOpenid::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C2S_AccountAskOpenid)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string code = 2;
  if (this->code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // string anonymous_code = 3;
  if (this->anonymous_code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_anonymous_code());
  }

  // int32 game_id = 1;
  if (this->game_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_game_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void C2S_AccountAskOpenid::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.C2S_AccountAskOpenid)
  GOOGLE_DCHECK_NE(&from, this);
  const C2S_AccountAskOpenid* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<C2S_AccountAskOpenid>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.C2S_AccountAskOpenid)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.C2S_AccountAskOpenid)
    MergeFrom(*source);
  }
}

void C2S_AccountAskOpenid::MergeFrom(const C2S_AccountAskOpenid& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C2S_AccountAskOpenid)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.code().size() > 0) {

    code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  if (from.anonymous_code().size() > 0) {

    anonymous_code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.anonymous_code_);
  }
  if (from.game_id() != 0) {
    _internal_set_game_id(from._internal_game_id());
  }
}

void C2S_AccountAskOpenid::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.C2S_AccountAskOpenid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_AccountAskOpenid::CopyFrom(const C2S_AccountAskOpenid& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C2S_AccountAskOpenid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_AccountAskOpenid::IsInitialized() const {
  return true;
}

void C2S_AccountAskOpenid::InternalSwap(C2S_AccountAskOpenid* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  code_.Swap(&other->code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  anonymous_code_.Swap(&other->anonymous_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(game_id_, other->game_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C2S_AccountAskOpenid::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void S2C_AccountAskOpenid::InitAsDefaultInstance() {
}
class S2C_AccountAskOpenid::_Internal {
 public:
};

S2C_AccountAskOpenid::S2C_AccountAskOpenid()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Protocol.S2C_AccountAskOpenid)
}
S2C_AccountAskOpenid::S2C_AccountAskOpenid(const S2C_AccountAskOpenid& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  openid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_openid().empty()) {
    openid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.openid_);
  }
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S2C_AccountAskOpenid)
}

void S2C_AccountAskOpenid::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_S2C_AccountAskOpenid_protocol_5faccount_2eproto.base);
  openid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ret_ = 0;
}

S2C_AccountAskOpenid::~S2C_AccountAskOpenid() {
  // @@protoc_insertion_point(destructor:Protocol.S2C_AccountAskOpenid)
  SharedDtor();
}

void S2C_AccountAskOpenid::SharedDtor() {
  openid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void S2C_AccountAskOpenid::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const S2C_AccountAskOpenid& S2C_AccountAskOpenid::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_S2C_AccountAskOpenid_protocol_5faccount_2eproto.base);
  return *internal_default_instance();
}


void S2C_AccountAskOpenid::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S2C_AccountAskOpenid)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  openid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ret_ = 0;
  _internal_metadata_.Clear();
}

const char* S2C_AccountAskOpenid::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ret = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string openid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_openid(), ptr, ctx, "Protocol.S2C_AccountAskOpenid.openid");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S2C_AccountAskOpenid::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S2C_AccountAskOpenid)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ret = 1;
  if (this->ret() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ret(), target);
  }

  // string openid = 2;
  if (this->openid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_openid().data(), static_cast<int>(this->_internal_openid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.S2C_AccountAskOpenid.openid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_openid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S2C_AccountAskOpenid)
  return target;
}

size_t S2C_AccountAskOpenid::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S2C_AccountAskOpenid)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string openid = 2;
  if (this->openid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_openid());
  }

  // int32 ret = 1;
  if (this->ret() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ret());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S2C_AccountAskOpenid::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.S2C_AccountAskOpenid)
  GOOGLE_DCHECK_NE(&from, this);
  const S2C_AccountAskOpenid* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S2C_AccountAskOpenid>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.S2C_AccountAskOpenid)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.S2C_AccountAskOpenid)
    MergeFrom(*source);
  }
}

void S2C_AccountAskOpenid::MergeFrom(const S2C_AccountAskOpenid& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S2C_AccountAskOpenid)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.openid().size() > 0) {

    openid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.openid_);
  }
  if (from.ret() != 0) {
    _internal_set_ret(from._internal_ret());
  }
}

void S2C_AccountAskOpenid::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.S2C_AccountAskOpenid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_AccountAskOpenid::CopyFrom(const S2C_AccountAskOpenid& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S2C_AccountAskOpenid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_AccountAskOpenid::IsInitialized() const {
  return true;
}

void S2C_AccountAskOpenid::InternalSwap(S2C_AccountAskOpenid* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  openid_.Swap(&other->openid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ret_, other->ret_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S2C_AccountAskOpenid::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void C2S_AccountUpdate::InitAsDefaultInstance() {
}
class C2S_AccountUpdate::_Internal {
 public:
};

C2S_AccountUpdate::C2S_AccountUpdate()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Protocol.C2S_AccountUpdate)
}
C2S_AccountUpdate::C2S_AccountUpdate(const C2S_AccountUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  role_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_role_id().empty()) {
    role_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.role_id_);
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  avatarurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_avatarurl().empty()) {
    avatarurl_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.avatarurl_);
  }
  country_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_country().empty()) {
    country_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.country_);
  }
  city_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_city().empty()) {
    city_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.city_);
  }
  game_id_ = from.game_id_;
  // @@protoc_insertion_point(copy_constructor:Protocol.C2S_AccountUpdate)
}

void C2S_AccountUpdate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_C2S_AccountUpdate_protocol_5faccount_2eproto.base);
  role_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatarurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  country_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  city_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  game_id_ = 0;
}

C2S_AccountUpdate::~C2S_AccountUpdate() {
  // @@protoc_insertion_point(destructor:Protocol.C2S_AccountUpdate)
  SharedDtor();
}

void C2S_AccountUpdate::SharedDtor() {
  role_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatarurl_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  country_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  city_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void C2S_AccountUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const C2S_AccountUpdate& C2S_AccountUpdate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_C2S_AccountUpdate_protocol_5faccount_2eproto.base);
  return *internal_default_instance();
}


void C2S_AccountUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C2S_AccountUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  role_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatarurl_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  country_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  city_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  game_id_ = 0;
  _internal_metadata_.Clear();
}

const char* C2S_AccountUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 game_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string role_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_role_id(), ptr, ctx, "Protocol.C2S_AccountUpdate.role_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_name(), ptr, ctx, "Protocol.C2S_AccountUpdate.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string avatarurl = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_avatarurl(), ptr, ctx, "Protocol.C2S_AccountUpdate.avatarurl");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string country = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_country(), ptr, ctx, "Protocol.C2S_AccountUpdate.country");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string city = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_city(), ptr, ctx, "Protocol.C2S_AccountUpdate.city");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* C2S_AccountUpdate::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C2S_AccountUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 game_id = 1;
  if (this->game_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_game_id(), target);
  }

  // string role_id = 2;
  if (this->role_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_role_id().data(), static_cast<int>(this->_internal_role_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.C2S_AccountUpdate.role_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_role_id(), target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.C2S_AccountUpdate.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // string avatarurl = 4;
  if (this->avatarurl().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_avatarurl().data(), static_cast<int>(this->_internal_avatarurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.C2S_AccountUpdate.avatarurl");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_avatarurl(), target);
  }

  // string country = 5;
  if (this->country().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_country().data(), static_cast<int>(this->_internal_country().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.C2S_AccountUpdate.country");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_country(), target);
  }

  // string city = 6;
  if (this->city().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_city().data(), static_cast<int>(this->_internal_city().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.C2S_AccountUpdate.city");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_city(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C2S_AccountUpdate)
  return target;
}

size_t C2S_AccountUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C2S_AccountUpdate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string role_id = 2;
  if (this->role_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_role_id());
  }

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string avatarurl = 4;
  if (this->avatarurl().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_avatarurl());
  }

  // string country = 5;
  if (this->country().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_country());
  }

  // string city = 6;
  if (this->city().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_city());
  }

  // int32 game_id = 1;
  if (this->game_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_game_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void C2S_AccountUpdate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.C2S_AccountUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const C2S_AccountUpdate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<C2S_AccountUpdate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.C2S_AccountUpdate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.C2S_AccountUpdate)
    MergeFrom(*source);
  }
}

void C2S_AccountUpdate::MergeFrom(const C2S_AccountUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C2S_AccountUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.role_id().size() > 0) {

    role_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.role_id_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.avatarurl().size() > 0) {

    avatarurl_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.avatarurl_);
  }
  if (from.country().size() > 0) {

    country_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.country_);
  }
  if (from.city().size() > 0) {

    city_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.city_);
  }
  if (from.game_id() != 0) {
    _internal_set_game_id(from._internal_game_id());
  }
}

void C2S_AccountUpdate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.C2S_AccountUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_AccountUpdate::CopyFrom(const C2S_AccountUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C2S_AccountUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_AccountUpdate::IsInitialized() const {
  return true;
}

void C2S_AccountUpdate::InternalSwap(C2S_AccountUpdate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  role_id_.Swap(&other->role_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  avatarurl_.Swap(&other->avatarurl_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  country_.Swap(&other->country_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  city_.Swap(&other->city_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(game_id_, other->game_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C2S_AccountUpdate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void S2C_AccountUpdate::InitAsDefaultInstance() {
}
class S2C_AccountUpdate::_Internal {
 public:
};

S2C_AccountUpdate::S2C_AccountUpdate()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Protocol.S2C_AccountUpdate)
}
S2C_AccountUpdate::S2C_AccountUpdate(const S2C_AccountUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S2C_AccountUpdate)
}

void S2C_AccountUpdate::SharedCtor() {
  ret_ = 0;
}

S2C_AccountUpdate::~S2C_AccountUpdate() {
  // @@protoc_insertion_point(destructor:Protocol.S2C_AccountUpdate)
  SharedDtor();
}

void S2C_AccountUpdate::SharedDtor() {
}

void S2C_AccountUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const S2C_AccountUpdate& S2C_AccountUpdate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_S2C_AccountUpdate_protocol_5faccount_2eproto.base);
  return *internal_default_instance();
}


void S2C_AccountUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S2C_AccountUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ret_ = 0;
  _internal_metadata_.Clear();
}

const char* S2C_AccountUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ret = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S2C_AccountUpdate::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S2C_AccountUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ret = 1;
  if (this->ret() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ret(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S2C_AccountUpdate)
  return target;
}

size_t S2C_AccountUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S2C_AccountUpdate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 ret = 1;
  if (this->ret() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ret());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S2C_AccountUpdate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.S2C_AccountUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const S2C_AccountUpdate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S2C_AccountUpdate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.S2C_AccountUpdate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.S2C_AccountUpdate)
    MergeFrom(*source);
  }
}

void S2C_AccountUpdate::MergeFrom(const S2C_AccountUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S2C_AccountUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ret() != 0) {
    _internal_set_ret(from._internal_ret());
  }
}

void S2C_AccountUpdate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.S2C_AccountUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_AccountUpdate::CopyFrom(const S2C_AccountUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S2C_AccountUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_AccountUpdate::IsInitialized() const {
  return true;
}

void S2C_AccountUpdate::InternalSwap(S2C_AccountUpdate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(ret_, other->ret_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S2C_AccountUpdate::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Protocol::C2S_AccountLogin* Arena::CreateMaybeMessage< ::Protocol::C2S_AccountLogin >(Arena* arena) {
  return Arena::CreateInternal< ::Protocol::C2S_AccountLogin >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S2C_AccountLogin* Arena::CreateMaybeMessage< ::Protocol::S2C_AccountLogin >(Arena* arena) {
  return Arena::CreateInternal< ::Protocol::S2C_AccountLogin >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C2S_AccountCreate* Arena::CreateMaybeMessage< ::Protocol::C2S_AccountCreate >(Arena* arena) {
  return Arena::CreateInternal< ::Protocol::C2S_AccountCreate >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S2C_AccountCreate* Arena::CreateMaybeMessage< ::Protocol::S2C_AccountCreate >(Arena* arena) {
  return Arena::CreateInternal< ::Protocol::S2C_AccountCreate >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C2S_AccountLoad* Arena::CreateMaybeMessage< ::Protocol::C2S_AccountLoad >(Arena* arena) {
  return Arena::CreateInternal< ::Protocol::C2S_AccountLoad >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S2C_AccountLoad* Arena::CreateMaybeMessage< ::Protocol::S2C_AccountLoad >(Arena* arena) {
  return Arena::CreateInternal< ::Protocol::S2C_AccountLoad >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C2S_AccountAskOpenid* Arena::CreateMaybeMessage< ::Protocol::C2S_AccountAskOpenid >(Arena* arena) {
  return Arena::CreateInternal< ::Protocol::C2S_AccountAskOpenid >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S2C_AccountAskOpenid* Arena::CreateMaybeMessage< ::Protocol::S2C_AccountAskOpenid >(Arena* arena) {
  return Arena::CreateInternal< ::Protocol::S2C_AccountAskOpenid >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C2S_AccountUpdate* Arena::CreateMaybeMessage< ::Protocol::C2S_AccountUpdate >(Arena* arena) {
  return Arena::CreateInternal< ::Protocol::C2S_AccountUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S2C_AccountUpdate* Arena::CreateMaybeMessage< ::Protocol::S2C_AccountUpdate >(Arena* arena) {
  return Arena::CreateInternal< ::Protocol::S2C_AccountUpdate >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
