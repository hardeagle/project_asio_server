// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol_account.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protocol_5faccount_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protocol_5faccount_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protocol_5faccount_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protocol_5faccount_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protocol_5faccount_2eproto;
namespace Protocol {
class C2S_AccountAskOpenid;
class C2S_AccountAskOpenidDefaultTypeInternal;
extern C2S_AccountAskOpenidDefaultTypeInternal _C2S_AccountAskOpenid_default_instance_;
class C2S_AccountCreate;
class C2S_AccountCreateDefaultTypeInternal;
extern C2S_AccountCreateDefaultTypeInternal _C2S_AccountCreate_default_instance_;
class C2S_AccountLoad;
class C2S_AccountLoadDefaultTypeInternal;
extern C2S_AccountLoadDefaultTypeInternal _C2S_AccountLoad_default_instance_;
class C2S_AccountLogin;
class C2S_AccountLoginDefaultTypeInternal;
extern C2S_AccountLoginDefaultTypeInternal _C2S_AccountLogin_default_instance_;
class C2S_AccountUpdate;
class C2S_AccountUpdateDefaultTypeInternal;
extern C2S_AccountUpdateDefaultTypeInternal _C2S_AccountUpdate_default_instance_;
class S2C_AccountAskOpenid;
class S2C_AccountAskOpenidDefaultTypeInternal;
extern S2C_AccountAskOpenidDefaultTypeInternal _S2C_AccountAskOpenid_default_instance_;
class S2C_AccountCreate;
class S2C_AccountCreateDefaultTypeInternal;
extern S2C_AccountCreateDefaultTypeInternal _S2C_AccountCreate_default_instance_;
class S2C_AccountLoad;
class S2C_AccountLoadDefaultTypeInternal;
extern S2C_AccountLoadDefaultTypeInternal _S2C_AccountLoad_default_instance_;
class S2C_AccountLogin;
class S2C_AccountLoginDefaultTypeInternal;
extern S2C_AccountLoginDefaultTypeInternal _S2C_AccountLogin_default_instance_;
class S2C_AccountUpdate;
class S2C_AccountUpdateDefaultTypeInternal;
extern S2C_AccountUpdateDefaultTypeInternal _S2C_AccountUpdate_default_instance_;
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::Protocol::C2S_AccountAskOpenid* Arena::CreateMaybeMessage<::Protocol::C2S_AccountAskOpenid>(Arena*);
template<> ::Protocol::C2S_AccountCreate* Arena::CreateMaybeMessage<::Protocol::C2S_AccountCreate>(Arena*);
template<> ::Protocol::C2S_AccountLoad* Arena::CreateMaybeMessage<::Protocol::C2S_AccountLoad>(Arena*);
template<> ::Protocol::C2S_AccountLogin* Arena::CreateMaybeMessage<::Protocol::C2S_AccountLogin>(Arena*);
template<> ::Protocol::C2S_AccountUpdate* Arena::CreateMaybeMessage<::Protocol::C2S_AccountUpdate>(Arena*);
template<> ::Protocol::S2C_AccountAskOpenid* Arena::CreateMaybeMessage<::Protocol::S2C_AccountAskOpenid>(Arena*);
template<> ::Protocol::S2C_AccountCreate* Arena::CreateMaybeMessage<::Protocol::S2C_AccountCreate>(Arena*);
template<> ::Protocol::S2C_AccountLoad* Arena::CreateMaybeMessage<::Protocol::S2C_AccountLoad>(Arena*);
template<> ::Protocol::S2C_AccountLogin* Arena::CreateMaybeMessage<::Protocol::S2C_AccountLogin>(Arena*);
template<> ::Protocol::S2C_AccountUpdate* Arena::CreateMaybeMessage<::Protocol::S2C_AccountUpdate>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

// ===================================================================

class C2S_AccountLogin :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2S_AccountLogin) */ {
 public:
  C2S_AccountLogin();
  virtual ~C2S_AccountLogin();

  C2S_AccountLogin(const C2S_AccountLogin& from);
  C2S_AccountLogin(C2S_AccountLogin&& from) noexcept
    : C2S_AccountLogin() {
    *this = ::std::move(from);
  }

  inline C2S_AccountLogin& operator=(const C2S_AccountLogin& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_AccountLogin& operator=(C2S_AccountLogin&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const C2S_AccountLogin& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const C2S_AccountLogin* internal_default_instance() {
    return reinterpret_cast<const C2S_AccountLogin*>(
               &_C2S_AccountLogin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(C2S_AccountLogin& a, C2S_AccountLogin& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_AccountLogin* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C2S_AccountLogin* New() const final {
    return CreateMaybeMessage<C2S_AccountLogin>(nullptr);
  }

  C2S_AccountLogin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C2S_AccountLogin>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C2S_AccountLogin& from);
  void MergeFrom(const C2S_AccountLogin& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2S_AccountLogin* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_AccountLogin";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_5faccount_2eproto);
    return ::descriptor_table_protocol_5faccount_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOpenidFieldNumber = 2,
    kGameIdFieldNumber = 1,
  };
  // string openid = 2;
  void clear_openid();
  const std::string& openid() const;
  void set_openid(const std::string& value);
  void set_openid(std::string&& value);
  void set_openid(const char* value);
  void set_openid(const char* value, size_t size);
  std::string* mutable_openid();
  std::string* release_openid();
  void set_allocated_openid(std::string* openid);
  private:
  const std::string& _internal_openid() const;
  void _internal_set_openid(const std::string& value);
  std::string* _internal_mutable_openid();
  public:

  // int32 game_id = 1;
  void clear_game_id();
  ::PROTOBUF_NAMESPACE_ID::int32 game_id() const;
  void set_game_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_game_id() const;
  void _internal_set_game_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C2S_AccountLogin)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr openid_;
  ::PROTOBUF_NAMESPACE_ID::int32 game_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protocol_5faccount_2eproto;
};
// -------------------------------------------------------------------

class S2C_AccountLogin :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_AccountLogin) */ {
 public:
  S2C_AccountLogin();
  virtual ~S2C_AccountLogin();

  S2C_AccountLogin(const S2C_AccountLogin& from);
  S2C_AccountLogin(S2C_AccountLogin&& from) noexcept
    : S2C_AccountLogin() {
    *this = ::std::move(from);
  }

  inline S2C_AccountLogin& operator=(const S2C_AccountLogin& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_AccountLogin& operator=(S2C_AccountLogin&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const S2C_AccountLogin& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2C_AccountLogin* internal_default_instance() {
    return reinterpret_cast<const S2C_AccountLogin*>(
               &_S2C_AccountLogin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(S2C_AccountLogin& a, S2C_AccountLogin& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_AccountLogin* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S2C_AccountLogin* New() const final {
    return CreateMaybeMessage<S2C_AccountLogin>(nullptr);
  }

  S2C_AccountLogin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S2C_AccountLogin>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S2C_AccountLogin& from);
  void MergeFrom(const S2C_AccountLogin& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_AccountLogin* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_AccountLogin";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_5faccount_2eproto);
    return ::descriptor_table_protocol_5faccount_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleIdFieldNumber = 2,
    kRetFieldNumber = 1,
  };
  // int64 role_id = 2;
  void clear_role_id();
  ::PROTOBUF_NAMESPACE_ID::int64 role_id() const;
  void set_role_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_role_id() const;
  void _internal_set_role_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 ret = 1;
  void clear_ret();
  ::PROTOBUF_NAMESPACE_ID::int32 ret() const;
  void set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ret() const;
  void _internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_AccountLogin)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 role_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protocol_5faccount_2eproto;
};
// -------------------------------------------------------------------

class C2S_AccountCreate :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2S_AccountCreate) */ {
 public:
  C2S_AccountCreate();
  virtual ~C2S_AccountCreate();

  C2S_AccountCreate(const C2S_AccountCreate& from);
  C2S_AccountCreate(C2S_AccountCreate&& from) noexcept
    : C2S_AccountCreate() {
    *this = ::std::move(from);
  }

  inline C2S_AccountCreate& operator=(const C2S_AccountCreate& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_AccountCreate& operator=(C2S_AccountCreate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const C2S_AccountCreate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const C2S_AccountCreate* internal_default_instance() {
    return reinterpret_cast<const C2S_AccountCreate*>(
               &_C2S_AccountCreate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(C2S_AccountCreate& a, C2S_AccountCreate& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_AccountCreate* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C2S_AccountCreate* New() const final {
    return CreateMaybeMessage<C2S_AccountCreate>(nullptr);
  }

  C2S_AccountCreate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C2S_AccountCreate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C2S_AccountCreate& from);
  void MergeFrom(const C2S_AccountCreate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2S_AccountCreate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_AccountCreate";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_5faccount_2eproto);
    return ::descriptor_table_protocol_5faccount_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOpenidFieldNumber = 2,
    kGameIdFieldNumber = 1,
  };
  // string openid = 2;
  void clear_openid();
  const std::string& openid() const;
  void set_openid(const std::string& value);
  void set_openid(std::string&& value);
  void set_openid(const char* value);
  void set_openid(const char* value, size_t size);
  std::string* mutable_openid();
  std::string* release_openid();
  void set_allocated_openid(std::string* openid);
  private:
  const std::string& _internal_openid() const;
  void _internal_set_openid(const std::string& value);
  std::string* _internal_mutable_openid();
  public:

  // int32 game_id = 1;
  void clear_game_id();
  ::PROTOBUF_NAMESPACE_ID::int32 game_id() const;
  void set_game_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_game_id() const;
  void _internal_set_game_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C2S_AccountCreate)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr openid_;
  ::PROTOBUF_NAMESPACE_ID::int32 game_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protocol_5faccount_2eproto;
};
// -------------------------------------------------------------------

class S2C_AccountCreate :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_AccountCreate) */ {
 public:
  S2C_AccountCreate();
  virtual ~S2C_AccountCreate();

  S2C_AccountCreate(const S2C_AccountCreate& from);
  S2C_AccountCreate(S2C_AccountCreate&& from) noexcept
    : S2C_AccountCreate() {
    *this = ::std::move(from);
  }

  inline S2C_AccountCreate& operator=(const S2C_AccountCreate& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_AccountCreate& operator=(S2C_AccountCreate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const S2C_AccountCreate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2C_AccountCreate* internal_default_instance() {
    return reinterpret_cast<const S2C_AccountCreate*>(
               &_S2C_AccountCreate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(S2C_AccountCreate& a, S2C_AccountCreate& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_AccountCreate* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S2C_AccountCreate* New() const final {
    return CreateMaybeMessage<S2C_AccountCreate>(nullptr);
  }

  S2C_AccountCreate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S2C_AccountCreate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S2C_AccountCreate& from);
  void MergeFrom(const S2C_AccountCreate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_AccountCreate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_AccountCreate";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_5faccount_2eproto);
    return ::descriptor_table_protocol_5faccount_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleIdFieldNumber = 2,
    kRetFieldNumber = 1,
  };
  // int64 role_id = 2;
  void clear_role_id();
  ::PROTOBUF_NAMESPACE_ID::int64 role_id() const;
  void set_role_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_role_id() const;
  void _internal_set_role_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 ret = 1;
  void clear_ret();
  ::PROTOBUF_NAMESPACE_ID::int32 ret() const;
  void set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ret() const;
  void _internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_AccountCreate)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 role_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protocol_5faccount_2eproto;
};
// -------------------------------------------------------------------

class C2S_AccountLoad :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2S_AccountLoad) */ {
 public:
  C2S_AccountLoad();
  virtual ~C2S_AccountLoad();

  C2S_AccountLoad(const C2S_AccountLoad& from);
  C2S_AccountLoad(C2S_AccountLoad&& from) noexcept
    : C2S_AccountLoad() {
    *this = ::std::move(from);
  }

  inline C2S_AccountLoad& operator=(const C2S_AccountLoad& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_AccountLoad& operator=(C2S_AccountLoad&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const C2S_AccountLoad& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const C2S_AccountLoad* internal_default_instance() {
    return reinterpret_cast<const C2S_AccountLoad*>(
               &_C2S_AccountLoad_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(C2S_AccountLoad& a, C2S_AccountLoad& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_AccountLoad* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C2S_AccountLoad* New() const final {
    return CreateMaybeMessage<C2S_AccountLoad>(nullptr);
  }

  C2S_AccountLoad* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C2S_AccountLoad>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C2S_AccountLoad& from);
  void MergeFrom(const C2S_AccountLoad& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2S_AccountLoad* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_AccountLoad";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_5faccount_2eproto);
    return ::descriptor_table_protocol_5faccount_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleIdFieldNumber = 2,
    kGameIdFieldNumber = 1,
  };
  // int64 role_id = 2;
  void clear_role_id();
  ::PROTOBUF_NAMESPACE_ID::int64 role_id() const;
  void set_role_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_role_id() const;
  void _internal_set_role_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 game_id = 1;
  void clear_game_id();
  ::PROTOBUF_NAMESPACE_ID::int32 game_id() const;
  void set_game_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_game_id() const;
  void _internal_set_game_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C2S_AccountLoad)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 role_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 game_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protocol_5faccount_2eproto;
};
// -------------------------------------------------------------------

class S2C_AccountLoad :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_AccountLoad) */ {
 public:
  S2C_AccountLoad();
  virtual ~S2C_AccountLoad();

  S2C_AccountLoad(const S2C_AccountLoad& from);
  S2C_AccountLoad(S2C_AccountLoad&& from) noexcept
    : S2C_AccountLoad() {
    *this = ::std::move(from);
  }

  inline S2C_AccountLoad& operator=(const S2C_AccountLoad& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_AccountLoad& operator=(S2C_AccountLoad&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const S2C_AccountLoad& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2C_AccountLoad* internal_default_instance() {
    return reinterpret_cast<const S2C_AccountLoad*>(
               &_S2C_AccountLoad_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(S2C_AccountLoad& a, S2C_AccountLoad& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_AccountLoad* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S2C_AccountLoad* New() const final {
    return CreateMaybeMessage<S2C_AccountLoad>(nullptr);
  }

  S2C_AccountLoad* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S2C_AccountLoad>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S2C_AccountLoad& from);
  void MergeFrom(const S2C_AccountLoad& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_AccountLoad* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_AccountLoad";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_5faccount_2eproto);
    return ::descriptor_table_protocol_5faccount_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleIdFieldNumber = 2,
    kRetFieldNumber = 1,
  };
  // int64 role_id = 2;
  void clear_role_id();
  ::PROTOBUF_NAMESPACE_ID::int64 role_id() const;
  void set_role_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_role_id() const;
  void _internal_set_role_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 ret = 1;
  void clear_ret();
  ::PROTOBUF_NAMESPACE_ID::int32 ret() const;
  void set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ret() const;
  void _internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_AccountLoad)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 role_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protocol_5faccount_2eproto;
};
// -------------------------------------------------------------------

class C2S_AccountAskOpenid :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2S_AccountAskOpenid) */ {
 public:
  C2S_AccountAskOpenid();
  virtual ~C2S_AccountAskOpenid();

  C2S_AccountAskOpenid(const C2S_AccountAskOpenid& from);
  C2S_AccountAskOpenid(C2S_AccountAskOpenid&& from) noexcept
    : C2S_AccountAskOpenid() {
    *this = ::std::move(from);
  }

  inline C2S_AccountAskOpenid& operator=(const C2S_AccountAskOpenid& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_AccountAskOpenid& operator=(C2S_AccountAskOpenid&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const C2S_AccountAskOpenid& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const C2S_AccountAskOpenid* internal_default_instance() {
    return reinterpret_cast<const C2S_AccountAskOpenid*>(
               &_C2S_AccountAskOpenid_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(C2S_AccountAskOpenid& a, C2S_AccountAskOpenid& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_AccountAskOpenid* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C2S_AccountAskOpenid* New() const final {
    return CreateMaybeMessage<C2S_AccountAskOpenid>(nullptr);
  }

  C2S_AccountAskOpenid* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C2S_AccountAskOpenid>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C2S_AccountAskOpenid& from);
  void MergeFrom(const C2S_AccountAskOpenid& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2S_AccountAskOpenid* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_AccountAskOpenid";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_5faccount_2eproto);
    return ::descriptor_table_protocol_5faccount_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 2,
    kAnonymousCodeFieldNumber = 3,
    kGameIdFieldNumber = 1,
  };
  // string code = 2;
  void clear_code();
  const std::string& code() const;
  void set_code(const std::string& value);
  void set_code(std::string&& value);
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  std::string* mutable_code();
  std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // string anonymous_code = 3;
  void clear_anonymous_code();
  const std::string& anonymous_code() const;
  void set_anonymous_code(const std::string& value);
  void set_anonymous_code(std::string&& value);
  void set_anonymous_code(const char* value);
  void set_anonymous_code(const char* value, size_t size);
  std::string* mutable_anonymous_code();
  std::string* release_anonymous_code();
  void set_allocated_anonymous_code(std::string* anonymous_code);
  private:
  const std::string& _internal_anonymous_code() const;
  void _internal_set_anonymous_code(const std::string& value);
  std::string* _internal_mutable_anonymous_code();
  public:

  // int32 game_id = 1;
  void clear_game_id();
  ::PROTOBUF_NAMESPACE_ID::int32 game_id() const;
  void set_game_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_game_id() const;
  void _internal_set_game_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C2S_AccountAskOpenid)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr anonymous_code_;
  ::PROTOBUF_NAMESPACE_ID::int32 game_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protocol_5faccount_2eproto;
};
// -------------------------------------------------------------------

class S2C_AccountAskOpenid :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_AccountAskOpenid) */ {
 public:
  S2C_AccountAskOpenid();
  virtual ~S2C_AccountAskOpenid();

  S2C_AccountAskOpenid(const S2C_AccountAskOpenid& from);
  S2C_AccountAskOpenid(S2C_AccountAskOpenid&& from) noexcept
    : S2C_AccountAskOpenid() {
    *this = ::std::move(from);
  }

  inline S2C_AccountAskOpenid& operator=(const S2C_AccountAskOpenid& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_AccountAskOpenid& operator=(S2C_AccountAskOpenid&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const S2C_AccountAskOpenid& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2C_AccountAskOpenid* internal_default_instance() {
    return reinterpret_cast<const S2C_AccountAskOpenid*>(
               &_S2C_AccountAskOpenid_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(S2C_AccountAskOpenid& a, S2C_AccountAskOpenid& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_AccountAskOpenid* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S2C_AccountAskOpenid* New() const final {
    return CreateMaybeMessage<S2C_AccountAskOpenid>(nullptr);
  }

  S2C_AccountAskOpenid* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S2C_AccountAskOpenid>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S2C_AccountAskOpenid& from);
  void MergeFrom(const S2C_AccountAskOpenid& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_AccountAskOpenid* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_AccountAskOpenid";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_5faccount_2eproto);
    return ::descriptor_table_protocol_5faccount_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOpenidFieldNumber = 2,
    kRetFieldNumber = 1,
  };
  // string openid = 2;
  void clear_openid();
  const std::string& openid() const;
  void set_openid(const std::string& value);
  void set_openid(std::string&& value);
  void set_openid(const char* value);
  void set_openid(const char* value, size_t size);
  std::string* mutable_openid();
  std::string* release_openid();
  void set_allocated_openid(std::string* openid);
  private:
  const std::string& _internal_openid() const;
  void _internal_set_openid(const std::string& value);
  std::string* _internal_mutable_openid();
  public:

  // int32 ret = 1;
  void clear_ret();
  ::PROTOBUF_NAMESPACE_ID::int32 ret() const;
  void set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ret() const;
  void _internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_AccountAskOpenid)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr openid_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protocol_5faccount_2eproto;
};
// -------------------------------------------------------------------

class C2S_AccountUpdate :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2S_AccountUpdate) */ {
 public:
  C2S_AccountUpdate();
  virtual ~C2S_AccountUpdate();

  C2S_AccountUpdate(const C2S_AccountUpdate& from);
  C2S_AccountUpdate(C2S_AccountUpdate&& from) noexcept
    : C2S_AccountUpdate() {
    *this = ::std::move(from);
  }

  inline C2S_AccountUpdate& operator=(const C2S_AccountUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_AccountUpdate& operator=(C2S_AccountUpdate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const C2S_AccountUpdate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const C2S_AccountUpdate* internal_default_instance() {
    return reinterpret_cast<const C2S_AccountUpdate*>(
               &_C2S_AccountUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(C2S_AccountUpdate& a, C2S_AccountUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_AccountUpdate* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C2S_AccountUpdate* New() const final {
    return CreateMaybeMessage<C2S_AccountUpdate>(nullptr);
  }

  C2S_AccountUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C2S_AccountUpdate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C2S_AccountUpdate& from);
  void MergeFrom(const C2S_AccountUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2S_AccountUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_AccountUpdate";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_5faccount_2eproto);
    return ::descriptor_table_protocol_5faccount_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleIdFieldNumber = 2,
    kNameFieldNumber = 3,
    kAvatarurlFieldNumber = 4,
    kCountryFieldNumber = 5,
    kCityFieldNumber = 6,
    kGameIdFieldNumber = 1,
  };
  // string role_id = 2;
  void clear_role_id();
  const std::string& role_id() const;
  void set_role_id(const std::string& value);
  void set_role_id(std::string&& value);
  void set_role_id(const char* value);
  void set_role_id(const char* value, size_t size);
  std::string* mutable_role_id();
  std::string* release_role_id();
  void set_allocated_role_id(std::string* role_id);
  private:
  const std::string& _internal_role_id() const;
  void _internal_set_role_id(const std::string& value);
  std::string* _internal_mutable_role_id();
  public:

  // string name = 3;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string avatarurl = 4;
  void clear_avatarurl();
  const std::string& avatarurl() const;
  void set_avatarurl(const std::string& value);
  void set_avatarurl(std::string&& value);
  void set_avatarurl(const char* value);
  void set_avatarurl(const char* value, size_t size);
  std::string* mutable_avatarurl();
  std::string* release_avatarurl();
  void set_allocated_avatarurl(std::string* avatarurl);
  private:
  const std::string& _internal_avatarurl() const;
  void _internal_set_avatarurl(const std::string& value);
  std::string* _internal_mutable_avatarurl();
  public:

  // string country = 5;
  void clear_country();
  const std::string& country() const;
  void set_country(const std::string& value);
  void set_country(std::string&& value);
  void set_country(const char* value);
  void set_country(const char* value, size_t size);
  std::string* mutable_country();
  std::string* release_country();
  void set_allocated_country(std::string* country);
  private:
  const std::string& _internal_country() const;
  void _internal_set_country(const std::string& value);
  std::string* _internal_mutable_country();
  public:

  // string city = 6;
  void clear_city();
  const std::string& city() const;
  void set_city(const std::string& value);
  void set_city(std::string&& value);
  void set_city(const char* value);
  void set_city(const char* value, size_t size);
  std::string* mutable_city();
  std::string* release_city();
  void set_allocated_city(std::string* city);
  private:
  const std::string& _internal_city() const;
  void _internal_set_city(const std::string& value);
  std::string* _internal_mutable_city();
  public:

  // int32 game_id = 1;
  void clear_game_id();
  ::PROTOBUF_NAMESPACE_ID::int32 game_id() const;
  void set_game_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_game_id() const;
  void _internal_set_game_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C2S_AccountUpdate)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr role_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr avatarurl_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr country_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr city_;
  ::PROTOBUF_NAMESPACE_ID::int32 game_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protocol_5faccount_2eproto;
};
// -------------------------------------------------------------------

class S2C_AccountUpdate :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_AccountUpdate) */ {
 public:
  S2C_AccountUpdate();
  virtual ~S2C_AccountUpdate();

  S2C_AccountUpdate(const S2C_AccountUpdate& from);
  S2C_AccountUpdate(S2C_AccountUpdate&& from) noexcept
    : S2C_AccountUpdate() {
    *this = ::std::move(from);
  }

  inline S2C_AccountUpdate& operator=(const S2C_AccountUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_AccountUpdate& operator=(S2C_AccountUpdate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const S2C_AccountUpdate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2C_AccountUpdate* internal_default_instance() {
    return reinterpret_cast<const S2C_AccountUpdate*>(
               &_S2C_AccountUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(S2C_AccountUpdate& a, S2C_AccountUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_AccountUpdate* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S2C_AccountUpdate* New() const final {
    return CreateMaybeMessage<S2C_AccountUpdate>(nullptr);
  }

  S2C_AccountUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S2C_AccountUpdate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S2C_AccountUpdate& from);
  void MergeFrom(const S2C_AccountUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_AccountUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_AccountUpdate";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_5faccount_2eproto);
    return ::descriptor_table_protocol_5faccount_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRetFieldNumber = 1,
  };
  // int32 ret = 1;
  void clear_ret();
  ::PROTOBUF_NAMESPACE_ID::int32 ret() const;
  void set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ret() const;
  void _internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_AccountUpdate)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protocol_5faccount_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// C2S_AccountLogin

// int32 game_id = 1;
inline void C2S_AccountLogin::clear_game_id() {
  game_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 C2S_AccountLogin::_internal_game_id() const {
  return game_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 C2S_AccountLogin::game_id() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_AccountLogin.game_id)
  return _internal_game_id();
}
inline void C2S_AccountLogin::_internal_set_game_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  game_id_ = value;
}
inline void C2S_AccountLogin::set_game_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_game_id(value);
  // @@protoc_insertion_point(field_set:Protocol.C2S_AccountLogin.game_id)
}

// string openid = 2;
inline void C2S_AccountLogin::clear_openid() {
  openid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& C2S_AccountLogin::openid() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_AccountLogin.openid)
  return _internal_openid();
}
inline void C2S_AccountLogin::set_openid(const std::string& value) {
  _internal_set_openid(value);
  // @@protoc_insertion_point(field_set:Protocol.C2S_AccountLogin.openid)
}
inline std::string* C2S_AccountLogin::mutable_openid() {
  // @@protoc_insertion_point(field_mutable:Protocol.C2S_AccountLogin.openid)
  return _internal_mutable_openid();
}
inline const std::string& C2S_AccountLogin::_internal_openid() const {
  return openid_.GetNoArena();
}
inline void C2S_AccountLogin::_internal_set_openid(const std::string& value) {
  
  openid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void C2S_AccountLogin::set_openid(std::string&& value) {
  
  openid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Protocol.C2S_AccountLogin.openid)
}
inline void C2S_AccountLogin::set_openid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  openid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protocol.C2S_AccountLogin.openid)
}
inline void C2S_AccountLogin::set_openid(const char* value, size_t size) {
  
  openid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protocol.C2S_AccountLogin.openid)
}
inline std::string* C2S_AccountLogin::_internal_mutable_openid() {
  
  return openid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* C2S_AccountLogin::release_openid() {
  // @@protoc_insertion_point(field_release:Protocol.C2S_AccountLogin.openid)
  
  return openid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void C2S_AccountLogin::set_allocated_openid(std::string* openid) {
  if (openid != nullptr) {
    
  } else {
    
  }
  openid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), openid);
  // @@protoc_insertion_point(field_set_allocated:Protocol.C2S_AccountLogin.openid)
}

// -------------------------------------------------------------------

// S2C_AccountLogin

// int32 ret = 1;
inline void S2C_AccountLogin::clear_ret() {
  ret_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S2C_AccountLogin::_internal_ret() const {
  return ret_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S2C_AccountLogin::ret() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_AccountLogin.ret)
  return _internal_ret();
}
inline void S2C_AccountLogin::_internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ret_ = value;
}
inline void S2C_AccountLogin::set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_AccountLogin.ret)
}

// int64 role_id = 2;
inline void S2C_AccountLogin::clear_role_id() {
  role_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 S2C_AccountLogin::_internal_role_id() const {
  return role_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 S2C_AccountLogin::role_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_AccountLogin.role_id)
  return _internal_role_id();
}
inline void S2C_AccountLogin::_internal_set_role_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  role_id_ = value;
}
inline void S2C_AccountLogin::set_role_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_role_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_AccountLogin.role_id)
}

// -------------------------------------------------------------------

// C2S_AccountCreate

// int32 game_id = 1;
inline void C2S_AccountCreate::clear_game_id() {
  game_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 C2S_AccountCreate::_internal_game_id() const {
  return game_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 C2S_AccountCreate::game_id() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_AccountCreate.game_id)
  return _internal_game_id();
}
inline void C2S_AccountCreate::_internal_set_game_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  game_id_ = value;
}
inline void C2S_AccountCreate::set_game_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_game_id(value);
  // @@protoc_insertion_point(field_set:Protocol.C2S_AccountCreate.game_id)
}

// string openid = 2;
inline void C2S_AccountCreate::clear_openid() {
  openid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& C2S_AccountCreate::openid() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_AccountCreate.openid)
  return _internal_openid();
}
inline void C2S_AccountCreate::set_openid(const std::string& value) {
  _internal_set_openid(value);
  // @@protoc_insertion_point(field_set:Protocol.C2S_AccountCreate.openid)
}
inline std::string* C2S_AccountCreate::mutable_openid() {
  // @@protoc_insertion_point(field_mutable:Protocol.C2S_AccountCreate.openid)
  return _internal_mutable_openid();
}
inline const std::string& C2S_AccountCreate::_internal_openid() const {
  return openid_.GetNoArena();
}
inline void C2S_AccountCreate::_internal_set_openid(const std::string& value) {
  
  openid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void C2S_AccountCreate::set_openid(std::string&& value) {
  
  openid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Protocol.C2S_AccountCreate.openid)
}
inline void C2S_AccountCreate::set_openid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  openid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protocol.C2S_AccountCreate.openid)
}
inline void C2S_AccountCreate::set_openid(const char* value, size_t size) {
  
  openid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protocol.C2S_AccountCreate.openid)
}
inline std::string* C2S_AccountCreate::_internal_mutable_openid() {
  
  return openid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* C2S_AccountCreate::release_openid() {
  // @@protoc_insertion_point(field_release:Protocol.C2S_AccountCreate.openid)
  
  return openid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void C2S_AccountCreate::set_allocated_openid(std::string* openid) {
  if (openid != nullptr) {
    
  } else {
    
  }
  openid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), openid);
  // @@protoc_insertion_point(field_set_allocated:Protocol.C2S_AccountCreate.openid)
}

// -------------------------------------------------------------------

// S2C_AccountCreate

// int32 ret = 1;
inline void S2C_AccountCreate::clear_ret() {
  ret_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S2C_AccountCreate::_internal_ret() const {
  return ret_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S2C_AccountCreate::ret() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_AccountCreate.ret)
  return _internal_ret();
}
inline void S2C_AccountCreate::_internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ret_ = value;
}
inline void S2C_AccountCreate::set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_AccountCreate.ret)
}

// int64 role_id = 2;
inline void S2C_AccountCreate::clear_role_id() {
  role_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 S2C_AccountCreate::_internal_role_id() const {
  return role_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 S2C_AccountCreate::role_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_AccountCreate.role_id)
  return _internal_role_id();
}
inline void S2C_AccountCreate::_internal_set_role_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  role_id_ = value;
}
inline void S2C_AccountCreate::set_role_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_role_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_AccountCreate.role_id)
}

// -------------------------------------------------------------------

// C2S_AccountLoad

// int32 game_id = 1;
inline void C2S_AccountLoad::clear_game_id() {
  game_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 C2S_AccountLoad::_internal_game_id() const {
  return game_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 C2S_AccountLoad::game_id() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_AccountLoad.game_id)
  return _internal_game_id();
}
inline void C2S_AccountLoad::_internal_set_game_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  game_id_ = value;
}
inline void C2S_AccountLoad::set_game_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_game_id(value);
  // @@protoc_insertion_point(field_set:Protocol.C2S_AccountLoad.game_id)
}

// int64 role_id = 2;
inline void C2S_AccountLoad::clear_role_id() {
  role_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 C2S_AccountLoad::_internal_role_id() const {
  return role_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 C2S_AccountLoad::role_id() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_AccountLoad.role_id)
  return _internal_role_id();
}
inline void C2S_AccountLoad::_internal_set_role_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  role_id_ = value;
}
inline void C2S_AccountLoad::set_role_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_role_id(value);
  // @@protoc_insertion_point(field_set:Protocol.C2S_AccountLoad.role_id)
}

// -------------------------------------------------------------------

// S2C_AccountLoad

// int32 ret = 1;
inline void S2C_AccountLoad::clear_ret() {
  ret_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S2C_AccountLoad::_internal_ret() const {
  return ret_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S2C_AccountLoad::ret() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_AccountLoad.ret)
  return _internal_ret();
}
inline void S2C_AccountLoad::_internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ret_ = value;
}
inline void S2C_AccountLoad::set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_AccountLoad.ret)
}

// int64 role_id = 2;
inline void S2C_AccountLoad::clear_role_id() {
  role_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 S2C_AccountLoad::_internal_role_id() const {
  return role_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 S2C_AccountLoad::role_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_AccountLoad.role_id)
  return _internal_role_id();
}
inline void S2C_AccountLoad::_internal_set_role_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  role_id_ = value;
}
inline void S2C_AccountLoad::set_role_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_role_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_AccountLoad.role_id)
}

// -------------------------------------------------------------------

// C2S_AccountAskOpenid

// int32 game_id = 1;
inline void C2S_AccountAskOpenid::clear_game_id() {
  game_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 C2S_AccountAskOpenid::_internal_game_id() const {
  return game_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 C2S_AccountAskOpenid::game_id() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_AccountAskOpenid.game_id)
  return _internal_game_id();
}
inline void C2S_AccountAskOpenid::_internal_set_game_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  game_id_ = value;
}
inline void C2S_AccountAskOpenid::set_game_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_game_id(value);
  // @@protoc_insertion_point(field_set:Protocol.C2S_AccountAskOpenid.game_id)
}

// string code = 2;
inline void C2S_AccountAskOpenid::clear_code() {
  code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& C2S_AccountAskOpenid::code() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_AccountAskOpenid.code)
  return _internal_code();
}
inline void C2S_AccountAskOpenid::set_code(const std::string& value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:Protocol.C2S_AccountAskOpenid.code)
}
inline std::string* C2S_AccountAskOpenid::mutable_code() {
  // @@protoc_insertion_point(field_mutable:Protocol.C2S_AccountAskOpenid.code)
  return _internal_mutable_code();
}
inline const std::string& C2S_AccountAskOpenid::_internal_code() const {
  return code_.GetNoArena();
}
inline void C2S_AccountAskOpenid::_internal_set_code(const std::string& value) {
  
  code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void C2S_AccountAskOpenid::set_code(std::string&& value) {
  
  code_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Protocol.C2S_AccountAskOpenid.code)
}
inline void C2S_AccountAskOpenid::set_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protocol.C2S_AccountAskOpenid.code)
}
inline void C2S_AccountAskOpenid::set_code(const char* value, size_t size) {
  
  code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protocol.C2S_AccountAskOpenid.code)
}
inline std::string* C2S_AccountAskOpenid::_internal_mutable_code() {
  
  return code_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* C2S_AccountAskOpenid::release_code() {
  // @@protoc_insertion_point(field_release:Protocol.C2S_AccountAskOpenid.code)
  
  return code_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void C2S_AccountAskOpenid::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  code_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:Protocol.C2S_AccountAskOpenid.code)
}

// string anonymous_code = 3;
inline void C2S_AccountAskOpenid::clear_anonymous_code() {
  anonymous_code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& C2S_AccountAskOpenid::anonymous_code() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_AccountAskOpenid.anonymous_code)
  return _internal_anonymous_code();
}
inline void C2S_AccountAskOpenid::set_anonymous_code(const std::string& value) {
  _internal_set_anonymous_code(value);
  // @@protoc_insertion_point(field_set:Protocol.C2S_AccountAskOpenid.anonymous_code)
}
inline std::string* C2S_AccountAskOpenid::mutable_anonymous_code() {
  // @@protoc_insertion_point(field_mutable:Protocol.C2S_AccountAskOpenid.anonymous_code)
  return _internal_mutable_anonymous_code();
}
inline const std::string& C2S_AccountAskOpenid::_internal_anonymous_code() const {
  return anonymous_code_.GetNoArena();
}
inline void C2S_AccountAskOpenid::_internal_set_anonymous_code(const std::string& value) {
  
  anonymous_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void C2S_AccountAskOpenid::set_anonymous_code(std::string&& value) {
  
  anonymous_code_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Protocol.C2S_AccountAskOpenid.anonymous_code)
}
inline void C2S_AccountAskOpenid::set_anonymous_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  anonymous_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protocol.C2S_AccountAskOpenid.anonymous_code)
}
inline void C2S_AccountAskOpenid::set_anonymous_code(const char* value, size_t size) {
  
  anonymous_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protocol.C2S_AccountAskOpenid.anonymous_code)
}
inline std::string* C2S_AccountAskOpenid::_internal_mutable_anonymous_code() {
  
  return anonymous_code_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* C2S_AccountAskOpenid::release_anonymous_code() {
  // @@protoc_insertion_point(field_release:Protocol.C2S_AccountAskOpenid.anonymous_code)
  
  return anonymous_code_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void C2S_AccountAskOpenid::set_allocated_anonymous_code(std::string* anonymous_code) {
  if (anonymous_code != nullptr) {
    
  } else {
    
  }
  anonymous_code_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), anonymous_code);
  // @@protoc_insertion_point(field_set_allocated:Protocol.C2S_AccountAskOpenid.anonymous_code)
}

// -------------------------------------------------------------------

// S2C_AccountAskOpenid

// int32 ret = 1;
inline void S2C_AccountAskOpenid::clear_ret() {
  ret_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S2C_AccountAskOpenid::_internal_ret() const {
  return ret_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S2C_AccountAskOpenid::ret() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_AccountAskOpenid.ret)
  return _internal_ret();
}
inline void S2C_AccountAskOpenid::_internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ret_ = value;
}
inline void S2C_AccountAskOpenid::set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_AccountAskOpenid.ret)
}

// string openid = 2;
inline void S2C_AccountAskOpenid::clear_openid() {
  openid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& S2C_AccountAskOpenid::openid() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_AccountAskOpenid.openid)
  return _internal_openid();
}
inline void S2C_AccountAskOpenid::set_openid(const std::string& value) {
  _internal_set_openid(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_AccountAskOpenid.openid)
}
inline std::string* S2C_AccountAskOpenid::mutable_openid() {
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_AccountAskOpenid.openid)
  return _internal_mutable_openid();
}
inline const std::string& S2C_AccountAskOpenid::_internal_openid() const {
  return openid_.GetNoArena();
}
inline void S2C_AccountAskOpenid::_internal_set_openid(const std::string& value) {
  
  openid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void S2C_AccountAskOpenid::set_openid(std::string&& value) {
  
  openid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Protocol.S2C_AccountAskOpenid.openid)
}
inline void S2C_AccountAskOpenid::set_openid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  openid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protocol.S2C_AccountAskOpenid.openid)
}
inline void S2C_AccountAskOpenid::set_openid(const char* value, size_t size) {
  
  openid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protocol.S2C_AccountAskOpenid.openid)
}
inline std::string* S2C_AccountAskOpenid::_internal_mutable_openid() {
  
  return openid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* S2C_AccountAskOpenid::release_openid() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_AccountAskOpenid.openid)
  
  return openid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void S2C_AccountAskOpenid::set_allocated_openid(std::string* openid) {
  if (openid != nullptr) {
    
  } else {
    
  }
  openid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), openid);
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_AccountAskOpenid.openid)
}

// -------------------------------------------------------------------

// C2S_AccountUpdate

// int32 game_id = 1;
inline void C2S_AccountUpdate::clear_game_id() {
  game_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 C2S_AccountUpdate::_internal_game_id() const {
  return game_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 C2S_AccountUpdate::game_id() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_AccountUpdate.game_id)
  return _internal_game_id();
}
inline void C2S_AccountUpdate::_internal_set_game_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  game_id_ = value;
}
inline void C2S_AccountUpdate::set_game_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_game_id(value);
  // @@protoc_insertion_point(field_set:Protocol.C2S_AccountUpdate.game_id)
}

// string role_id = 2;
inline void C2S_AccountUpdate::clear_role_id() {
  role_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& C2S_AccountUpdate::role_id() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_AccountUpdate.role_id)
  return _internal_role_id();
}
inline void C2S_AccountUpdate::set_role_id(const std::string& value) {
  _internal_set_role_id(value);
  // @@protoc_insertion_point(field_set:Protocol.C2S_AccountUpdate.role_id)
}
inline std::string* C2S_AccountUpdate::mutable_role_id() {
  // @@protoc_insertion_point(field_mutable:Protocol.C2S_AccountUpdate.role_id)
  return _internal_mutable_role_id();
}
inline const std::string& C2S_AccountUpdate::_internal_role_id() const {
  return role_id_.GetNoArena();
}
inline void C2S_AccountUpdate::_internal_set_role_id(const std::string& value) {
  
  role_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void C2S_AccountUpdate::set_role_id(std::string&& value) {
  
  role_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Protocol.C2S_AccountUpdate.role_id)
}
inline void C2S_AccountUpdate::set_role_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  role_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protocol.C2S_AccountUpdate.role_id)
}
inline void C2S_AccountUpdate::set_role_id(const char* value, size_t size) {
  
  role_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protocol.C2S_AccountUpdate.role_id)
}
inline std::string* C2S_AccountUpdate::_internal_mutable_role_id() {
  
  return role_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* C2S_AccountUpdate::release_role_id() {
  // @@protoc_insertion_point(field_release:Protocol.C2S_AccountUpdate.role_id)
  
  return role_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void C2S_AccountUpdate::set_allocated_role_id(std::string* role_id) {
  if (role_id != nullptr) {
    
  } else {
    
  }
  role_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), role_id);
  // @@protoc_insertion_point(field_set_allocated:Protocol.C2S_AccountUpdate.role_id)
}

// string name = 3;
inline void C2S_AccountUpdate::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& C2S_AccountUpdate::name() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_AccountUpdate.name)
  return _internal_name();
}
inline void C2S_AccountUpdate::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:Protocol.C2S_AccountUpdate.name)
}
inline std::string* C2S_AccountUpdate::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Protocol.C2S_AccountUpdate.name)
  return _internal_mutable_name();
}
inline const std::string& C2S_AccountUpdate::_internal_name() const {
  return name_.GetNoArena();
}
inline void C2S_AccountUpdate::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void C2S_AccountUpdate::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Protocol.C2S_AccountUpdate.name)
}
inline void C2S_AccountUpdate::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protocol.C2S_AccountUpdate.name)
}
inline void C2S_AccountUpdate::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protocol.C2S_AccountUpdate.name)
}
inline std::string* C2S_AccountUpdate::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* C2S_AccountUpdate::release_name() {
  // @@protoc_insertion_point(field_release:Protocol.C2S_AccountUpdate.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void C2S_AccountUpdate::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Protocol.C2S_AccountUpdate.name)
}

// string avatarurl = 4;
inline void C2S_AccountUpdate::clear_avatarurl() {
  avatarurl_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& C2S_AccountUpdate::avatarurl() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_AccountUpdate.avatarurl)
  return _internal_avatarurl();
}
inline void C2S_AccountUpdate::set_avatarurl(const std::string& value) {
  _internal_set_avatarurl(value);
  // @@protoc_insertion_point(field_set:Protocol.C2S_AccountUpdate.avatarurl)
}
inline std::string* C2S_AccountUpdate::mutable_avatarurl() {
  // @@protoc_insertion_point(field_mutable:Protocol.C2S_AccountUpdate.avatarurl)
  return _internal_mutable_avatarurl();
}
inline const std::string& C2S_AccountUpdate::_internal_avatarurl() const {
  return avatarurl_.GetNoArena();
}
inline void C2S_AccountUpdate::_internal_set_avatarurl(const std::string& value) {
  
  avatarurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void C2S_AccountUpdate::set_avatarurl(std::string&& value) {
  
  avatarurl_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Protocol.C2S_AccountUpdate.avatarurl)
}
inline void C2S_AccountUpdate::set_avatarurl(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  avatarurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protocol.C2S_AccountUpdate.avatarurl)
}
inline void C2S_AccountUpdate::set_avatarurl(const char* value, size_t size) {
  
  avatarurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protocol.C2S_AccountUpdate.avatarurl)
}
inline std::string* C2S_AccountUpdate::_internal_mutable_avatarurl() {
  
  return avatarurl_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* C2S_AccountUpdate::release_avatarurl() {
  // @@protoc_insertion_point(field_release:Protocol.C2S_AccountUpdate.avatarurl)
  
  return avatarurl_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void C2S_AccountUpdate::set_allocated_avatarurl(std::string* avatarurl) {
  if (avatarurl != nullptr) {
    
  } else {
    
  }
  avatarurl_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), avatarurl);
  // @@protoc_insertion_point(field_set_allocated:Protocol.C2S_AccountUpdate.avatarurl)
}

// string country = 5;
inline void C2S_AccountUpdate::clear_country() {
  country_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& C2S_AccountUpdate::country() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_AccountUpdate.country)
  return _internal_country();
}
inline void C2S_AccountUpdate::set_country(const std::string& value) {
  _internal_set_country(value);
  // @@protoc_insertion_point(field_set:Protocol.C2S_AccountUpdate.country)
}
inline std::string* C2S_AccountUpdate::mutable_country() {
  // @@protoc_insertion_point(field_mutable:Protocol.C2S_AccountUpdate.country)
  return _internal_mutable_country();
}
inline const std::string& C2S_AccountUpdate::_internal_country() const {
  return country_.GetNoArena();
}
inline void C2S_AccountUpdate::_internal_set_country(const std::string& value) {
  
  country_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void C2S_AccountUpdate::set_country(std::string&& value) {
  
  country_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Protocol.C2S_AccountUpdate.country)
}
inline void C2S_AccountUpdate::set_country(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  country_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protocol.C2S_AccountUpdate.country)
}
inline void C2S_AccountUpdate::set_country(const char* value, size_t size) {
  
  country_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protocol.C2S_AccountUpdate.country)
}
inline std::string* C2S_AccountUpdate::_internal_mutable_country() {
  
  return country_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* C2S_AccountUpdate::release_country() {
  // @@protoc_insertion_point(field_release:Protocol.C2S_AccountUpdate.country)
  
  return country_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void C2S_AccountUpdate::set_allocated_country(std::string* country) {
  if (country != nullptr) {
    
  } else {
    
  }
  country_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), country);
  // @@protoc_insertion_point(field_set_allocated:Protocol.C2S_AccountUpdate.country)
}

// string city = 6;
inline void C2S_AccountUpdate::clear_city() {
  city_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& C2S_AccountUpdate::city() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_AccountUpdate.city)
  return _internal_city();
}
inline void C2S_AccountUpdate::set_city(const std::string& value) {
  _internal_set_city(value);
  // @@protoc_insertion_point(field_set:Protocol.C2S_AccountUpdate.city)
}
inline std::string* C2S_AccountUpdate::mutable_city() {
  // @@protoc_insertion_point(field_mutable:Protocol.C2S_AccountUpdate.city)
  return _internal_mutable_city();
}
inline const std::string& C2S_AccountUpdate::_internal_city() const {
  return city_.GetNoArena();
}
inline void C2S_AccountUpdate::_internal_set_city(const std::string& value) {
  
  city_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void C2S_AccountUpdate::set_city(std::string&& value) {
  
  city_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Protocol.C2S_AccountUpdate.city)
}
inline void C2S_AccountUpdate::set_city(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  city_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protocol.C2S_AccountUpdate.city)
}
inline void C2S_AccountUpdate::set_city(const char* value, size_t size) {
  
  city_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protocol.C2S_AccountUpdate.city)
}
inline std::string* C2S_AccountUpdate::_internal_mutable_city() {
  
  return city_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* C2S_AccountUpdate::release_city() {
  // @@protoc_insertion_point(field_release:Protocol.C2S_AccountUpdate.city)
  
  return city_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void C2S_AccountUpdate::set_allocated_city(std::string* city) {
  if (city != nullptr) {
    
  } else {
    
  }
  city_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), city);
  // @@protoc_insertion_point(field_set_allocated:Protocol.C2S_AccountUpdate.city)
}

// -------------------------------------------------------------------

// S2C_AccountUpdate

// int32 ret = 1;
inline void S2C_AccountUpdate::clear_ret() {
  ret_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S2C_AccountUpdate::_internal_ret() const {
  return ret_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S2C_AccountUpdate::ret() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_AccountUpdate.ret)
  return _internal_ret();
}
inline void S2C_AccountUpdate::_internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ret_ = value;
}
inline void S2C_AccountUpdate::set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_AccountUpdate.ret)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protocol_5faccount_2eproto
