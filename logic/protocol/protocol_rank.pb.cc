// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol_rank.proto

#include "protocol_rank.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_protocol_5frank_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RankItem_protocol_5frank_2eproto;
namespace Protocol {
class RankItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RankItem> _instance;
} _RankItem_default_instance_;
class C2S_RankLoadDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<C2S_RankLoad> _instance;
} _C2S_RankLoad_default_instance_;
class S2C_RankLoadDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<S2C_RankLoad> _instance;
} _S2C_RankLoad_default_instance_;
class C2S_RankUpdateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<C2S_RankUpdate> _instance;
} _C2S_RankUpdate_default_instance_;
class S2C_RankUpdateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<S2C_RankUpdate> _instance;
} _S2C_RankUpdate_default_instance_;
class S2C_RankMarqueeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<S2C_RankMarquee> _instance;
} _S2C_RankMarquee_default_instance_;
}  // namespace Protocol
static void InitDefaultsscc_info_C2S_RankLoad_protocol_5frank_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Protocol::_C2S_RankLoad_default_instance_;
    new (ptr) ::Protocol::C2S_RankLoad();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Protocol::C2S_RankLoad::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_C2S_RankLoad_protocol_5frank_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_C2S_RankLoad_protocol_5frank_2eproto}, {}};

static void InitDefaultsscc_info_C2S_RankUpdate_protocol_5frank_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Protocol::_C2S_RankUpdate_default_instance_;
    new (ptr) ::Protocol::C2S_RankUpdate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Protocol::C2S_RankUpdate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_C2S_RankUpdate_protocol_5frank_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_C2S_RankUpdate_protocol_5frank_2eproto}, {}};

static void InitDefaultsscc_info_RankItem_protocol_5frank_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Protocol::_RankItem_default_instance_;
    new (ptr) ::Protocol::RankItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Protocol::RankItem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RankItem_protocol_5frank_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RankItem_protocol_5frank_2eproto}, {}};

static void InitDefaultsscc_info_S2C_RankLoad_protocol_5frank_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Protocol::_S2C_RankLoad_default_instance_;
    new (ptr) ::Protocol::S2C_RankLoad();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Protocol::S2C_RankLoad::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_S2C_RankLoad_protocol_5frank_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_S2C_RankLoad_protocol_5frank_2eproto}, {
      &scc_info_RankItem_protocol_5frank_2eproto.base,}};

static void InitDefaultsscc_info_S2C_RankMarquee_protocol_5frank_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Protocol::_S2C_RankMarquee_default_instance_;
    new (ptr) ::Protocol::S2C_RankMarquee();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Protocol::S2C_RankMarquee::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_S2C_RankMarquee_protocol_5frank_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_S2C_RankMarquee_protocol_5frank_2eproto}, {}};

static void InitDefaultsscc_info_S2C_RankUpdate_protocol_5frank_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Protocol::_S2C_RankUpdate_default_instance_;
    new (ptr) ::Protocol::S2C_RankUpdate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Protocol::S2C_RankUpdate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_S2C_RankUpdate_protocol_5frank_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_S2C_RankUpdate_protocol_5frank_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_protocol_5frank_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_protocol_5frank_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_protocol_5frank_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_protocol_5frank_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::RankItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::RankItem, rank_),
  PROTOBUF_FIELD_OFFSET(::Protocol::RankItem, role_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::RankItem, name_),
  PROTOBUF_FIELD_OFFSET(::Protocol::RankItem, avatarurl_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C2S_RankLoad, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::C2S_RankLoad, game_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C2S_RankLoad, limit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_RankLoad, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_RankLoad, rank_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_RankLoad, ris_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C2S_RankUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::C2S_RankUpdate, game_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C2S_RankUpdate, score_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_RankUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_RankUpdate, ret_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_RankMarquee, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_RankMarquee, type_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_RankMarquee, score_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_RankMarquee, rank_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_RankMarquee, name_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Protocol::RankItem)},
  { 9, -1, sizeof(::Protocol::C2S_RankLoad)},
  { 16, -1, sizeof(::Protocol::S2C_RankLoad)},
  { 23, -1, sizeof(::Protocol::C2S_RankUpdate)},
  { 30, -1, sizeof(::Protocol::S2C_RankUpdate)},
  { 36, -1, sizeof(::Protocol::S2C_RankMarquee)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_RankItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_C2S_RankLoad_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_S2C_RankLoad_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_C2S_RankUpdate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_S2C_RankUpdate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_S2C_RankMarquee_default_instance_),
};

const char descriptor_table_protodef_protocol_5frank_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023protocol_rank.proto\022\010Protocol\"J\n\010RankI"
  "tem\022\014\n\004rank\030\001 \001(\005\022\017\n\007role_id\030\002 \001(\003\022\014\n\004na"
  "me\030\003 \001(\t\022\021\n\tavatarurl\030\004 \001(\t\".\n\014C2S_RankL"
  "oad\022\017\n\007game_id\030\001 \001(\005\022\r\n\005limit\030\002 \001(\005\"=\n\014S"
  "2C_RankLoad\022\014\n\004rank\030\001 \001(\005\022\037\n\003ris\030\002 \003(\0132\022"
  ".Protocol.RankItem\"0\n\016C2S_RankUpdate\022\017\n\007"
  "game_id\030\001 \001(\005\022\r\n\005score\030\002 \001(\005\"\035\n\016S2C_Rank"
  "Update\022\013\n\003ret\030\001 \001(\005\"J\n\017S2C_RankMarquee\022\014"
  "\n\004type\030\001 \001(\005\022\r\n\005score\030\002 \001(\005\022\014\n\004rank\030\003 \001("
  "\005\022\014\n\004name\030\004 \001(\tb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_protocol_5frank_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_protocol_5frank_2eproto_sccs[6] = {
  &scc_info_C2S_RankLoad_protocol_5frank_2eproto.base,
  &scc_info_C2S_RankUpdate_protocol_5frank_2eproto.base,
  &scc_info_RankItem_protocol_5frank_2eproto.base,
  &scc_info_S2C_RankLoad_protocol_5frank_2eproto.base,
  &scc_info_S2C_RankMarquee_protocol_5frank_2eproto.base,
  &scc_info_S2C_RankUpdate_protocol_5frank_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_protocol_5frank_2eproto_once;
static bool descriptor_table_protocol_5frank_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protocol_5frank_2eproto = {
  &descriptor_table_protocol_5frank_2eproto_initialized, descriptor_table_protodef_protocol_5frank_2eproto, "protocol_rank.proto", 383,
  &descriptor_table_protocol_5frank_2eproto_once, descriptor_table_protocol_5frank_2eproto_sccs, descriptor_table_protocol_5frank_2eproto_deps, 6, 0,
  schemas, file_default_instances, TableStruct_protocol_5frank_2eproto::offsets,
  file_level_metadata_protocol_5frank_2eproto, 6, file_level_enum_descriptors_protocol_5frank_2eproto, file_level_service_descriptors_protocol_5frank_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_protocol_5frank_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_protocol_5frank_2eproto), true);
namespace Protocol {

// ===================================================================

void RankItem::InitAsDefaultInstance() {
}
class RankItem::_Internal {
 public:
};

RankItem::RankItem()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Protocol.RankItem)
}
RankItem::RankItem(const RankItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  avatarurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_avatarurl().empty()) {
    avatarurl_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.avatarurl_);
  }
  ::memcpy(&role_id_, &from.role_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&rank_) -
    reinterpret_cast<char*>(&role_id_)) + sizeof(rank_));
  // @@protoc_insertion_point(copy_constructor:Protocol.RankItem)
}

void RankItem::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RankItem_protocol_5frank_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatarurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&role_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rank_) -
      reinterpret_cast<char*>(&role_id_)) + sizeof(rank_));
}

RankItem::~RankItem() {
  // @@protoc_insertion_point(destructor:Protocol.RankItem)
  SharedDtor();
}

void RankItem::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatarurl_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RankItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RankItem& RankItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RankItem_protocol_5frank_2eproto.base);
  return *internal_default_instance();
}


void RankItem::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.RankItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatarurl_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&role_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rank_) -
      reinterpret_cast<char*>(&role_id_)) + sizeof(rank_));
  _internal_metadata_.Clear();
}

const char* RankItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 rank = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 role_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          role_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_name(), ptr, ctx, "Protocol.RankItem.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string avatarurl = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_avatarurl(), ptr, ctx, "Protocol.RankItem.avatarurl");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RankItem::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.RankItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 rank = 1;
  if (this->rank() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_rank(), target);
  }

  // int64 role_id = 2;
  if (this->role_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_role_id(), target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.RankItem.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // string avatarurl = 4;
  if (this->avatarurl().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_avatarurl().data(), static_cast<int>(this->_internal_avatarurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.RankItem.avatarurl");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_avatarurl(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.RankItem)
  return target;
}

size_t RankItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.RankItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string avatarurl = 4;
  if (this->avatarurl().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_avatarurl());
  }

  // int64 role_id = 2;
  if (this->role_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_role_id());
  }

  // int32 rank = 1;
  if (this->rank() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rank());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RankItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.RankItem)
  GOOGLE_DCHECK_NE(&from, this);
  const RankItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RankItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.RankItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.RankItem)
    MergeFrom(*source);
  }
}

void RankItem::MergeFrom(const RankItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.RankItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.avatarurl().size() > 0) {

    avatarurl_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.avatarurl_);
  }
  if (from.role_id() != 0) {
    _internal_set_role_id(from._internal_role_id());
  }
  if (from.rank() != 0) {
    _internal_set_rank(from._internal_rank());
  }
}

void RankItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.RankItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RankItem::CopyFrom(const RankItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.RankItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankItem::IsInitialized() const {
  return true;
}

void RankItem::InternalSwap(RankItem* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  avatarurl_.Swap(&other->avatarurl_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(role_id_, other->role_id_);
  swap(rank_, other->rank_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RankItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void C2S_RankLoad::InitAsDefaultInstance() {
}
class C2S_RankLoad::_Internal {
 public:
};

C2S_RankLoad::C2S_RankLoad()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Protocol.C2S_RankLoad)
}
C2S_RankLoad::C2S_RankLoad(const C2S_RankLoad& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&game_id_, &from.game_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&limit_) -
    reinterpret_cast<char*>(&game_id_)) + sizeof(limit_));
  // @@protoc_insertion_point(copy_constructor:Protocol.C2S_RankLoad)
}

void C2S_RankLoad::SharedCtor() {
  ::memset(&game_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&limit_) -
      reinterpret_cast<char*>(&game_id_)) + sizeof(limit_));
}

C2S_RankLoad::~C2S_RankLoad() {
  // @@protoc_insertion_point(destructor:Protocol.C2S_RankLoad)
  SharedDtor();
}

void C2S_RankLoad::SharedDtor() {
}

void C2S_RankLoad::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const C2S_RankLoad& C2S_RankLoad::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_C2S_RankLoad_protocol_5frank_2eproto.base);
  return *internal_default_instance();
}


void C2S_RankLoad::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C2S_RankLoad)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&game_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&limit_) -
      reinterpret_cast<char*>(&game_id_)) + sizeof(limit_));
  _internal_metadata_.Clear();
}

const char* C2S_RankLoad::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 game_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 limit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* C2S_RankLoad::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C2S_RankLoad)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 game_id = 1;
  if (this->game_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_game_id(), target);
  }

  // int32 limit = 2;
  if (this->limit() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C2S_RankLoad)
  return target;
}

size_t C2S_RankLoad::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C2S_RankLoad)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 game_id = 1;
  if (this->game_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_game_id());
  }

  // int32 limit = 2;
  if (this->limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_limit());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void C2S_RankLoad::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.C2S_RankLoad)
  GOOGLE_DCHECK_NE(&from, this);
  const C2S_RankLoad* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<C2S_RankLoad>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.C2S_RankLoad)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.C2S_RankLoad)
    MergeFrom(*source);
  }
}

void C2S_RankLoad::MergeFrom(const C2S_RankLoad& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C2S_RankLoad)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.game_id() != 0) {
    _internal_set_game_id(from._internal_game_id());
  }
  if (from.limit() != 0) {
    _internal_set_limit(from._internal_limit());
  }
}

void C2S_RankLoad::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.C2S_RankLoad)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_RankLoad::CopyFrom(const C2S_RankLoad& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C2S_RankLoad)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_RankLoad::IsInitialized() const {
  return true;
}

void C2S_RankLoad::InternalSwap(C2S_RankLoad* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(game_id_, other->game_id_);
  swap(limit_, other->limit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C2S_RankLoad::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void S2C_RankLoad::InitAsDefaultInstance() {
}
class S2C_RankLoad::_Internal {
 public:
};

S2C_RankLoad::S2C_RankLoad()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Protocol.S2C_RankLoad)
}
S2C_RankLoad::S2C_RankLoad(const S2C_RankLoad& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      ris_(from.ris_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rank_ = from.rank_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S2C_RankLoad)
}

void S2C_RankLoad::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_S2C_RankLoad_protocol_5frank_2eproto.base);
  rank_ = 0;
}

S2C_RankLoad::~S2C_RankLoad() {
  // @@protoc_insertion_point(destructor:Protocol.S2C_RankLoad)
  SharedDtor();
}

void S2C_RankLoad::SharedDtor() {
}

void S2C_RankLoad::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const S2C_RankLoad& S2C_RankLoad::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_S2C_RankLoad_protocol_5frank_2eproto.base);
  return *internal_default_instance();
}


void S2C_RankLoad::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S2C_RankLoad)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ris_.Clear();
  rank_ = 0;
  _internal_metadata_.Clear();
}

const char* S2C_RankLoad::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 rank = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Protocol.RankItem ris = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ris(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S2C_RankLoad::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S2C_RankLoad)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 rank = 1;
  if (this->rank() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_rank(), target);
  }

  // repeated .Protocol.RankItem ris = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ris_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(2, this->_internal_ris(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S2C_RankLoad)
  return target;
}

size_t S2C_RankLoad::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S2C_RankLoad)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Protocol.RankItem ris = 2;
  total_size += 1UL * this->_internal_ris_size();
  for (const auto& msg : this->ris_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 rank = 1;
  if (this->rank() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rank());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S2C_RankLoad::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.S2C_RankLoad)
  GOOGLE_DCHECK_NE(&from, this);
  const S2C_RankLoad* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S2C_RankLoad>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.S2C_RankLoad)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.S2C_RankLoad)
    MergeFrom(*source);
  }
}

void S2C_RankLoad::MergeFrom(const S2C_RankLoad& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S2C_RankLoad)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ris_.MergeFrom(from.ris_);
  if (from.rank() != 0) {
    _internal_set_rank(from._internal_rank());
  }
}

void S2C_RankLoad::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.S2C_RankLoad)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_RankLoad::CopyFrom(const S2C_RankLoad& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S2C_RankLoad)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_RankLoad::IsInitialized() const {
  return true;
}

void S2C_RankLoad::InternalSwap(S2C_RankLoad* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ris_.InternalSwap(&other->ris_);
  swap(rank_, other->rank_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S2C_RankLoad::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void C2S_RankUpdate::InitAsDefaultInstance() {
}
class C2S_RankUpdate::_Internal {
 public:
};

C2S_RankUpdate::C2S_RankUpdate()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Protocol.C2S_RankUpdate)
}
C2S_RankUpdate::C2S_RankUpdate(const C2S_RankUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&game_id_, &from.game_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&game_id_)) + sizeof(score_));
  // @@protoc_insertion_point(copy_constructor:Protocol.C2S_RankUpdate)
}

void C2S_RankUpdate::SharedCtor() {
  ::memset(&game_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&score_) -
      reinterpret_cast<char*>(&game_id_)) + sizeof(score_));
}

C2S_RankUpdate::~C2S_RankUpdate() {
  // @@protoc_insertion_point(destructor:Protocol.C2S_RankUpdate)
  SharedDtor();
}

void C2S_RankUpdate::SharedDtor() {
}

void C2S_RankUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const C2S_RankUpdate& C2S_RankUpdate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_C2S_RankUpdate_protocol_5frank_2eproto.base);
  return *internal_default_instance();
}


void C2S_RankUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C2S_RankUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&game_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&score_) -
      reinterpret_cast<char*>(&game_id_)) + sizeof(score_));
  _internal_metadata_.Clear();
}

const char* C2S_RankUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 game_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 score = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* C2S_RankUpdate::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C2S_RankUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 game_id = 1;
  if (this->game_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_game_id(), target);
  }

  // int32 score = 2;
  if (this->score() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C2S_RankUpdate)
  return target;
}

size_t C2S_RankUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C2S_RankUpdate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 game_id = 1;
  if (this->game_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_game_id());
  }

  // int32 score = 2;
  if (this->score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_score());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void C2S_RankUpdate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.C2S_RankUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const C2S_RankUpdate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<C2S_RankUpdate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.C2S_RankUpdate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.C2S_RankUpdate)
    MergeFrom(*source);
  }
}

void C2S_RankUpdate::MergeFrom(const C2S_RankUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C2S_RankUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.game_id() != 0) {
    _internal_set_game_id(from._internal_game_id());
  }
  if (from.score() != 0) {
    _internal_set_score(from._internal_score());
  }
}

void C2S_RankUpdate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.C2S_RankUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_RankUpdate::CopyFrom(const C2S_RankUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C2S_RankUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_RankUpdate::IsInitialized() const {
  return true;
}

void C2S_RankUpdate::InternalSwap(C2S_RankUpdate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(game_id_, other->game_id_);
  swap(score_, other->score_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C2S_RankUpdate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void S2C_RankUpdate::InitAsDefaultInstance() {
}
class S2C_RankUpdate::_Internal {
 public:
};

S2C_RankUpdate::S2C_RankUpdate()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Protocol.S2C_RankUpdate)
}
S2C_RankUpdate::S2C_RankUpdate(const S2C_RankUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S2C_RankUpdate)
}

void S2C_RankUpdate::SharedCtor() {
  ret_ = 0;
}

S2C_RankUpdate::~S2C_RankUpdate() {
  // @@protoc_insertion_point(destructor:Protocol.S2C_RankUpdate)
  SharedDtor();
}

void S2C_RankUpdate::SharedDtor() {
}

void S2C_RankUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const S2C_RankUpdate& S2C_RankUpdate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_S2C_RankUpdate_protocol_5frank_2eproto.base);
  return *internal_default_instance();
}


void S2C_RankUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S2C_RankUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ret_ = 0;
  _internal_metadata_.Clear();
}

const char* S2C_RankUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ret = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S2C_RankUpdate::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S2C_RankUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ret = 1;
  if (this->ret() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ret(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S2C_RankUpdate)
  return target;
}

size_t S2C_RankUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S2C_RankUpdate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 ret = 1;
  if (this->ret() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ret());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S2C_RankUpdate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.S2C_RankUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const S2C_RankUpdate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S2C_RankUpdate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.S2C_RankUpdate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.S2C_RankUpdate)
    MergeFrom(*source);
  }
}

void S2C_RankUpdate::MergeFrom(const S2C_RankUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S2C_RankUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ret() != 0) {
    _internal_set_ret(from._internal_ret());
  }
}

void S2C_RankUpdate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.S2C_RankUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_RankUpdate::CopyFrom(const S2C_RankUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S2C_RankUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_RankUpdate::IsInitialized() const {
  return true;
}

void S2C_RankUpdate::InternalSwap(S2C_RankUpdate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(ret_, other->ret_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S2C_RankUpdate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void S2C_RankMarquee::InitAsDefaultInstance() {
}
class S2C_RankMarquee::_Internal {
 public:
};

S2C_RankMarquee::S2C_RankMarquee()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Protocol.S2C_RankMarquee)
}
S2C_RankMarquee::S2C_RankMarquee(const S2C_RankMarquee& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&rank_) -
    reinterpret_cast<char*>(&type_)) + sizeof(rank_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S2C_RankMarquee)
}

void S2C_RankMarquee::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_S2C_RankMarquee_protocol_5frank_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rank_) -
      reinterpret_cast<char*>(&type_)) + sizeof(rank_));
}

S2C_RankMarquee::~S2C_RankMarquee() {
  // @@protoc_insertion_point(destructor:Protocol.S2C_RankMarquee)
  SharedDtor();
}

void S2C_RankMarquee::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void S2C_RankMarquee::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const S2C_RankMarquee& S2C_RankMarquee::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_S2C_RankMarquee_protocol_5frank_2eproto.base);
  return *internal_default_instance();
}


void S2C_RankMarquee::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S2C_RankMarquee)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rank_) -
      reinterpret_cast<char*>(&type_)) + sizeof(rank_));
  _internal_metadata_.Clear();
}

const char* S2C_RankMarquee::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 score = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 rank = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_name(), ptr, ctx, "Protocol.S2C_RankMarquee.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S2C_RankMarquee::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S2C_RankMarquee)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // int32 score = 2;
  if (this->score() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_score(), target);
  }

  // int32 rank = 3;
  if (this->rank() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_rank(), target);
  }

  // string name = 4;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.S2C_RankMarquee.name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S2C_RankMarquee)
  return target;
}

size_t S2C_RankMarquee::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S2C_RankMarquee)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 4;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  // int32 score = 2;
  if (this->score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_score());
  }

  // int32 rank = 3;
  if (this->rank() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rank());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S2C_RankMarquee::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.S2C_RankMarquee)
  GOOGLE_DCHECK_NE(&from, this);
  const S2C_RankMarquee* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S2C_RankMarquee>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.S2C_RankMarquee)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.S2C_RankMarquee)
    MergeFrom(*source);
  }
}

void S2C_RankMarquee::MergeFrom(const S2C_RankMarquee& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S2C_RankMarquee)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.score() != 0) {
    _internal_set_score(from._internal_score());
  }
  if (from.rank() != 0) {
    _internal_set_rank(from._internal_rank());
  }
}

void S2C_RankMarquee::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.S2C_RankMarquee)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_RankMarquee::CopyFrom(const S2C_RankMarquee& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S2C_RankMarquee)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_RankMarquee::IsInitialized() const {
  return true;
}

void S2C_RankMarquee::InternalSwap(S2C_RankMarquee* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
  swap(score_, other->score_);
  swap(rank_, other->rank_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S2C_RankMarquee::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Protocol::RankItem* Arena::CreateMaybeMessage< ::Protocol::RankItem >(Arena* arena) {
  return Arena::CreateInternal< ::Protocol::RankItem >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C2S_RankLoad* Arena::CreateMaybeMessage< ::Protocol::C2S_RankLoad >(Arena* arena) {
  return Arena::CreateInternal< ::Protocol::C2S_RankLoad >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S2C_RankLoad* Arena::CreateMaybeMessage< ::Protocol::S2C_RankLoad >(Arena* arena) {
  return Arena::CreateInternal< ::Protocol::S2C_RankLoad >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C2S_RankUpdate* Arena::CreateMaybeMessage< ::Protocol::C2S_RankUpdate >(Arena* arena) {
  return Arena::CreateInternal< ::Protocol::C2S_RankUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S2C_RankUpdate* Arena::CreateMaybeMessage< ::Protocol::S2C_RankUpdate >(Arena* arena) {
  return Arena::CreateInternal< ::Protocol::S2C_RankUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S2C_RankMarquee* Arena::CreateMaybeMessage< ::Protocol::S2C_RankMarquee >(Arena* arena) {
  return Arena::CreateInternal< ::Protocol::S2C_RankMarquee >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
