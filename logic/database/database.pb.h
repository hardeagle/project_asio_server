// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: database.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_database_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_database_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_database_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_database_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_database_2eproto;
namespace Database {
class Game;
class GameDefaultTypeInternal;
extern GameDefaultTypeInternal _Game_default_instance_;
class MapII;
class MapIIDefaultTypeInternal;
extern MapIIDefaultTypeInternal _MapII_default_instance_;
class Role;
class RoleDefaultTypeInternal;
extern RoleDefaultTypeInternal _Role_default_instance_;
class TimerField;
class TimerFieldDefaultTypeInternal;
extern TimerFieldDefaultTypeInternal _TimerField_default_instance_;
}  // namespace Database
PROTOBUF_NAMESPACE_OPEN
template<> ::Database::Game* Arena::CreateMaybeMessage<::Database::Game>(Arena*);
template<> ::Database::MapII* Arena::CreateMaybeMessage<::Database::MapII>(Arena*);
template<> ::Database::Role* Arena::CreateMaybeMessage<::Database::Role>(Arena*);
template<> ::Database::TimerField* Arena::CreateMaybeMessage<::Database::TimerField>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Database {

// ===================================================================

class MapII :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Database.MapII) */ {
 public:
  MapII();
  virtual ~MapII();

  MapII(const MapII& from);
  MapII(MapII&& from) noexcept
    : MapII() {
    *this = ::std::move(from);
  }

  inline MapII& operator=(const MapII& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapII& operator=(MapII&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MapII& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MapII* internal_default_instance() {
    return reinterpret_cast<const MapII*>(
               &_MapII_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MapII& a, MapII& b) {
    a.Swap(&b);
  }
  inline void Swap(MapII* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MapII* New() const final {
    return CreateMaybeMessage<MapII>(nullptr);
  }

  MapII* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MapII>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MapII& from);
  void MergeFrom(const MapII& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapII* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Database.MapII";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_database_2eproto);
    return ::descriptor_table_database_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValFieldNumber = 2,
  };
  // int32 key = 1;
  void clear_key();
  ::PROTOBUF_NAMESPACE_ID::int32 key() const;
  void set_key(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_key() const;
  void _internal_set_key(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 val = 2;
  void clear_val();
  ::PROTOBUF_NAMESPACE_ID::int32 val() const;
  void set_val(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_val() const;
  void _internal_set_val(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Database.MapII)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 key_;
  ::PROTOBUF_NAMESPACE_ID::int32 val_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_database_2eproto;
};
// -------------------------------------------------------------------

class Game :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Database.Game) */ {
 public:
  Game();
  virtual ~Game();

  Game(const Game& from);
  Game(Game&& from) noexcept
    : Game() {
    *this = ::std::move(from);
  }

  inline Game& operator=(const Game& from) {
    CopyFrom(from);
    return *this;
  }
  inline Game& operator=(Game&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Game& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Game* internal_default_instance() {
    return reinterpret_cast<const Game*>(
               &_Game_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Game& a, Game& b) {
    a.Swap(&b);
  }
  inline void Swap(Game* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Game* New() const final {
    return CreateMaybeMessage<Game>(nullptr);
  }

  Game* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Game>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Game& from);
  void MergeFrom(const Game& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Game* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Database.Game";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_database_2eproto);
    return ::descriptor_table_database_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
    kAppidFieldNumber = 4,
    kSecretFieldNumber = 5,
    kGameIdFieldNumber = 1,
    kPlatformFieldNumber = 2,
  };
  // string name = 3;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string appid = 4;
  void clear_appid();
  const std::string& appid() const;
  void set_appid(const std::string& value);
  void set_appid(std::string&& value);
  void set_appid(const char* value);
  void set_appid(const char* value, size_t size);
  std::string* mutable_appid();
  std::string* release_appid();
  void set_allocated_appid(std::string* appid);
  private:
  const std::string& _internal_appid() const;
  void _internal_set_appid(const std::string& value);
  std::string* _internal_mutable_appid();
  public:

  // string secret = 5;
  void clear_secret();
  const std::string& secret() const;
  void set_secret(const std::string& value);
  void set_secret(std::string&& value);
  void set_secret(const char* value);
  void set_secret(const char* value, size_t size);
  std::string* mutable_secret();
  std::string* release_secret();
  void set_allocated_secret(std::string* secret);
  private:
  const std::string& _internal_secret() const;
  void _internal_set_secret(const std::string& value);
  std::string* _internal_mutable_secret();
  public:

  // int32 game_id = 1;
  void clear_game_id();
  ::PROTOBUF_NAMESPACE_ID::int32 game_id() const;
  void set_game_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_game_id() const;
  void _internal_set_game_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 platform = 2;
  void clear_platform();
  ::PROTOBUF_NAMESPACE_ID::int32 platform() const;
  void set_platform(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_platform() const;
  void _internal_set_platform(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Database.Game)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr appid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secret_;
  ::PROTOBUF_NAMESPACE_ID::int32 game_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 platform_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_database_2eproto;
};
// -------------------------------------------------------------------

class Role :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Database.Role) */ {
 public:
  Role();
  virtual ~Role();

  Role(const Role& from);
  Role(Role&& from) noexcept
    : Role() {
    *this = ::std::move(from);
  }

  inline Role& operator=(const Role& from) {
    CopyFrom(from);
    return *this;
  }
  inline Role& operator=(Role&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Role& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Role* internal_default_instance() {
    return reinterpret_cast<const Role*>(
               &_Role_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Role& a, Role& b) {
    a.Swap(&b);
  }
  inline void Swap(Role* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Role* New() const final {
    return CreateMaybeMessage<Role>(nullptr);
  }

  Role* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Role>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Role& from);
  void MergeFrom(const Role& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Role* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Database.Role";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_database_2eproto);
    return ::descriptor_table_database_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOpenidFieldNumber = 3,
    kNameFieldNumber = 4,
    kAvatarurlFieldNumber = 5,
    kCountryFieldNumber = 6,
    kCityFieldNumber = 7,
    kRoleIdFieldNumber = 1,
    kGameIdFieldNumber = 2,
    kCreateTimeFieldNumber = 8,
    kLoginTimeFieldNumber = 9,
    kLogoutTimeFieldNumber = 10,
    kDailyResetTimeFieldNumber = 11,
  };
  // string openid = 3;
  void clear_openid();
  const std::string& openid() const;
  void set_openid(const std::string& value);
  void set_openid(std::string&& value);
  void set_openid(const char* value);
  void set_openid(const char* value, size_t size);
  std::string* mutable_openid();
  std::string* release_openid();
  void set_allocated_openid(std::string* openid);
  private:
  const std::string& _internal_openid() const;
  void _internal_set_openid(const std::string& value);
  std::string* _internal_mutable_openid();
  public:

  // string name = 4;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string avatarurl = 5;
  void clear_avatarurl();
  const std::string& avatarurl() const;
  void set_avatarurl(const std::string& value);
  void set_avatarurl(std::string&& value);
  void set_avatarurl(const char* value);
  void set_avatarurl(const char* value, size_t size);
  std::string* mutable_avatarurl();
  std::string* release_avatarurl();
  void set_allocated_avatarurl(std::string* avatarurl);
  private:
  const std::string& _internal_avatarurl() const;
  void _internal_set_avatarurl(const std::string& value);
  std::string* _internal_mutable_avatarurl();
  public:

  // string country = 6;
  void clear_country();
  const std::string& country() const;
  void set_country(const std::string& value);
  void set_country(std::string&& value);
  void set_country(const char* value);
  void set_country(const char* value, size_t size);
  std::string* mutable_country();
  std::string* release_country();
  void set_allocated_country(std::string* country);
  private:
  const std::string& _internal_country() const;
  void _internal_set_country(const std::string& value);
  std::string* _internal_mutable_country();
  public:

  // string city = 7;
  void clear_city();
  const std::string& city() const;
  void set_city(const std::string& value);
  void set_city(std::string&& value);
  void set_city(const char* value);
  void set_city(const char* value, size_t size);
  std::string* mutable_city();
  std::string* release_city();
  void set_allocated_city(std::string* city);
  private:
  const std::string& _internal_city() const;
  void _internal_set_city(const std::string& value);
  std::string* _internal_mutable_city();
  public:

  // int64 role_id = 1;
  void clear_role_id();
  ::PROTOBUF_NAMESPACE_ID::int64 role_id() const;
  void set_role_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_role_id() const;
  void _internal_set_role_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 game_id = 2;
  void clear_game_id();
  ::PROTOBUF_NAMESPACE_ID::int32 game_id() const;
  void set_game_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_game_id() const;
  void _internal_set_game_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 create_time = 8;
  void clear_create_time();
  ::PROTOBUF_NAMESPACE_ID::int32 create_time() const;
  void set_create_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_create_time() const;
  void _internal_set_create_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 login_time = 9;
  void clear_login_time();
  ::PROTOBUF_NAMESPACE_ID::int32 login_time() const;
  void set_login_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_login_time() const;
  void _internal_set_login_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 logout_time = 10;
  void clear_logout_time();
  ::PROTOBUF_NAMESPACE_ID::int32 logout_time() const;
  void set_logout_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_logout_time() const;
  void _internal_set_logout_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 daily_reset_time = 11;
  void clear_daily_reset_time();
  ::PROTOBUF_NAMESPACE_ID::int32 daily_reset_time() const;
  void set_daily_reset_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_daily_reset_time() const;
  void _internal_set_daily_reset_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Database.Role)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr openid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr avatarurl_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr country_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr city_;
  ::PROTOBUF_NAMESPACE_ID::int64 role_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 game_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 create_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 login_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 logout_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 daily_reset_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_database_2eproto;
};
// -------------------------------------------------------------------

class TimerField :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Database.TimerField) */ {
 public:
  TimerField();
  virtual ~TimerField();

  TimerField(const TimerField& from);
  TimerField(TimerField&& from) noexcept
    : TimerField() {
    *this = ::std::move(from);
  }

  inline TimerField& operator=(const TimerField& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimerField& operator=(TimerField&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TimerField& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TimerField* internal_default_instance() {
    return reinterpret_cast<const TimerField*>(
               &_TimerField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TimerField& a, TimerField& b) {
    a.Swap(&b);
  }
  inline void Swap(TimerField* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TimerField* New() const final {
    return CreateMaybeMessage<TimerField>(nullptr);
  }

  TimerField* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TimerField>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TimerField& from);
  void MergeFrom(const TimerField& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimerField* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Database.TimerField";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_database_2eproto);
    return ::descriptor_table_database_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTfsFieldNumber = 1,
  };
  // repeated .Database.MapII tfs = 1;
  int tfs_size() const;
  private:
  int _internal_tfs_size() const;
  public:
  void clear_tfs();
  ::Database::MapII* mutable_tfs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Database::MapII >*
      mutable_tfs();
  private:
  const ::Database::MapII& _internal_tfs(int index) const;
  ::Database::MapII* _internal_add_tfs();
  public:
  const ::Database::MapII& tfs(int index) const;
  ::Database::MapII* add_tfs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Database::MapII >&
      tfs() const;

  // @@protoc_insertion_point(class_scope:Database.TimerField)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Database::MapII > tfs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_database_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MapII

// int32 key = 1;
inline void MapII::clear_key() {
  key_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MapII::_internal_key() const {
  return key_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MapII::key() const {
  // @@protoc_insertion_point(field_get:Database.MapII.key)
  return _internal_key();
}
inline void MapII::_internal_set_key(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  key_ = value;
}
inline void MapII::set_key(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:Database.MapII.key)
}

// int32 val = 2;
inline void MapII::clear_val() {
  val_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MapII::_internal_val() const {
  return val_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MapII::val() const {
  // @@protoc_insertion_point(field_get:Database.MapII.val)
  return _internal_val();
}
inline void MapII::_internal_set_val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  val_ = value;
}
inline void MapII::set_val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_val(value);
  // @@protoc_insertion_point(field_set:Database.MapII.val)
}

// -------------------------------------------------------------------

// Game

// int32 game_id = 1;
inline void Game::clear_game_id() {
  game_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Game::_internal_game_id() const {
  return game_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Game::game_id() const {
  // @@protoc_insertion_point(field_get:Database.Game.game_id)
  return _internal_game_id();
}
inline void Game::_internal_set_game_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  game_id_ = value;
}
inline void Game::set_game_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_game_id(value);
  // @@protoc_insertion_point(field_set:Database.Game.game_id)
}

// int32 platform = 2;
inline void Game::clear_platform() {
  platform_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Game::_internal_platform() const {
  return platform_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Game::platform() const {
  // @@protoc_insertion_point(field_get:Database.Game.platform)
  return _internal_platform();
}
inline void Game::_internal_set_platform(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  platform_ = value;
}
inline void Game::set_platform(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_platform(value);
  // @@protoc_insertion_point(field_set:Database.Game.platform)
}

// string name = 3;
inline void Game::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Game::name() const {
  // @@protoc_insertion_point(field_get:Database.Game.name)
  return _internal_name();
}
inline void Game::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:Database.Game.name)
}
inline std::string* Game::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Database.Game.name)
  return _internal_mutable_name();
}
inline const std::string& Game::_internal_name() const {
  return name_.GetNoArena();
}
inline void Game::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Game::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Database.Game.name)
}
inline void Game::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Database.Game.name)
}
inline void Game::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Database.Game.name)
}
inline std::string* Game::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Game::release_name() {
  // @@protoc_insertion_point(field_release:Database.Game.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Game::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Database.Game.name)
}

// string appid = 4;
inline void Game::clear_appid() {
  appid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Game::appid() const {
  // @@protoc_insertion_point(field_get:Database.Game.appid)
  return _internal_appid();
}
inline void Game::set_appid(const std::string& value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:Database.Game.appid)
}
inline std::string* Game::mutable_appid() {
  // @@protoc_insertion_point(field_mutable:Database.Game.appid)
  return _internal_mutable_appid();
}
inline const std::string& Game::_internal_appid() const {
  return appid_.GetNoArena();
}
inline void Game::_internal_set_appid(const std::string& value) {
  
  appid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Game::set_appid(std::string&& value) {
  
  appid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Database.Game.appid)
}
inline void Game::set_appid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  appid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Database.Game.appid)
}
inline void Game::set_appid(const char* value, size_t size) {
  
  appid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Database.Game.appid)
}
inline std::string* Game::_internal_mutable_appid() {
  
  return appid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Game::release_appid() {
  // @@protoc_insertion_point(field_release:Database.Game.appid)
  
  return appid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Game::set_allocated_appid(std::string* appid) {
  if (appid != nullptr) {
    
  } else {
    
  }
  appid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), appid);
  // @@protoc_insertion_point(field_set_allocated:Database.Game.appid)
}

// string secret = 5;
inline void Game::clear_secret() {
  secret_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Game::secret() const {
  // @@protoc_insertion_point(field_get:Database.Game.secret)
  return _internal_secret();
}
inline void Game::set_secret(const std::string& value) {
  _internal_set_secret(value);
  // @@protoc_insertion_point(field_set:Database.Game.secret)
}
inline std::string* Game::mutable_secret() {
  // @@protoc_insertion_point(field_mutable:Database.Game.secret)
  return _internal_mutable_secret();
}
inline const std::string& Game::_internal_secret() const {
  return secret_.GetNoArena();
}
inline void Game::_internal_set_secret(const std::string& value) {
  
  secret_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Game::set_secret(std::string&& value) {
  
  secret_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Database.Game.secret)
}
inline void Game::set_secret(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  secret_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Database.Game.secret)
}
inline void Game::set_secret(const char* value, size_t size) {
  
  secret_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Database.Game.secret)
}
inline std::string* Game::_internal_mutable_secret() {
  
  return secret_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Game::release_secret() {
  // @@protoc_insertion_point(field_release:Database.Game.secret)
  
  return secret_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Game::set_allocated_secret(std::string* secret) {
  if (secret != nullptr) {
    
  } else {
    
  }
  secret_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), secret);
  // @@protoc_insertion_point(field_set_allocated:Database.Game.secret)
}

// -------------------------------------------------------------------

// Role

// int64 role_id = 1;
inline void Role::clear_role_id() {
  role_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Role::_internal_role_id() const {
  return role_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Role::role_id() const {
  // @@protoc_insertion_point(field_get:Database.Role.role_id)
  return _internal_role_id();
}
inline void Role::_internal_set_role_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  role_id_ = value;
}
inline void Role::set_role_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_role_id(value);
  // @@protoc_insertion_point(field_set:Database.Role.role_id)
}

// int32 game_id = 2;
inline void Role::clear_game_id() {
  game_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Role::_internal_game_id() const {
  return game_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Role::game_id() const {
  // @@protoc_insertion_point(field_get:Database.Role.game_id)
  return _internal_game_id();
}
inline void Role::_internal_set_game_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  game_id_ = value;
}
inline void Role::set_game_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_game_id(value);
  // @@protoc_insertion_point(field_set:Database.Role.game_id)
}

// string openid = 3;
inline void Role::clear_openid() {
  openid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Role::openid() const {
  // @@protoc_insertion_point(field_get:Database.Role.openid)
  return _internal_openid();
}
inline void Role::set_openid(const std::string& value) {
  _internal_set_openid(value);
  // @@protoc_insertion_point(field_set:Database.Role.openid)
}
inline std::string* Role::mutable_openid() {
  // @@protoc_insertion_point(field_mutable:Database.Role.openid)
  return _internal_mutable_openid();
}
inline const std::string& Role::_internal_openid() const {
  return openid_.GetNoArena();
}
inline void Role::_internal_set_openid(const std::string& value) {
  
  openid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Role::set_openid(std::string&& value) {
  
  openid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Database.Role.openid)
}
inline void Role::set_openid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  openid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Database.Role.openid)
}
inline void Role::set_openid(const char* value, size_t size) {
  
  openid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Database.Role.openid)
}
inline std::string* Role::_internal_mutable_openid() {
  
  return openid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Role::release_openid() {
  // @@protoc_insertion_point(field_release:Database.Role.openid)
  
  return openid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Role::set_allocated_openid(std::string* openid) {
  if (openid != nullptr) {
    
  } else {
    
  }
  openid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), openid);
  // @@protoc_insertion_point(field_set_allocated:Database.Role.openid)
}

// string name = 4;
inline void Role::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Role::name() const {
  // @@protoc_insertion_point(field_get:Database.Role.name)
  return _internal_name();
}
inline void Role::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:Database.Role.name)
}
inline std::string* Role::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Database.Role.name)
  return _internal_mutable_name();
}
inline const std::string& Role::_internal_name() const {
  return name_.GetNoArena();
}
inline void Role::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Role::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Database.Role.name)
}
inline void Role::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Database.Role.name)
}
inline void Role::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Database.Role.name)
}
inline std::string* Role::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Role::release_name() {
  // @@protoc_insertion_point(field_release:Database.Role.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Role::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Database.Role.name)
}

// string avatarurl = 5;
inline void Role::clear_avatarurl() {
  avatarurl_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Role::avatarurl() const {
  // @@protoc_insertion_point(field_get:Database.Role.avatarurl)
  return _internal_avatarurl();
}
inline void Role::set_avatarurl(const std::string& value) {
  _internal_set_avatarurl(value);
  // @@protoc_insertion_point(field_set:Database.Role.avatarurl)
}
inline std::string* Role::mutable_avatarurl() {
  // @@protoc_insertion_point(field_mutable:Database.Role.avatarurl)
  return _internal_mutable_avatarurl();
}
inline const std::string& Role::_internal_avatarurl() const {
  return avatarurl_.GetNoArena();
}
inline void Role::_internal_set_avatarurl(const std::string& value) {
  
  avatarurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Role::set_avatarurl(std::string&& value) {
  
  avatarurl_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Database.Role.avatarurl)
}
inline void Role::set_avatarurl(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  avatarurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Database.Role.avatarurl)
}
inline void Role::set_avatarurl(const char* value, size_t size) {
  
  avatarurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Database.Role.avatarurl)
}
inline std::string* Role::_internal_mutable_avatarurl() {
  
  return avatarurl_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Role::release_avatarurl() {
  // @@protoc_insertion_point(field_release:Database.Role.avatarurl)
  
  return avatarurl_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Role::set_allocated_avatarurl(std::string* avatarurl) {
  if (avatarurl != nullptr) {
    
  } else {
    
  }
  avatarurl_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), avatarurl);
  // @@protoc_insertion_point(field_set_allocated:Database.Role.avatarurl)
}

// string country = 6;
inline void Role::clear_country() {
  country_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Role::country() const {
  // @@protoc_insertion_point(field_get:Database.Role.country)
  return _internal_country();
}
inline void Role::set_country(const std::string& value) {
  _internal_set_country(value);
  // @@protoc_insertion_point(field_set:Database.Role.country)
}
inline std::string* Role::mutable_country() {
  // @@protoc_insertion_point(field_mutable:Database.Role.country)
  return _internal_mutable_country();
}
inline const std::string& Role::_internal_country() const {
  return country_.GetNoArena();
}
inline void Role::_internal_set_country(const std::string& value) {
  
  country_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Role::set_country(std::string&& value) {
  
  country_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Database.Role.country)
}
inline void Role::set_country(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  country_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Database.Role.country)
}
inline void Role::set_country(const char* value, size_t size) {
  
  country_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Database.Role.country)
}
inline std::string* Role::_internal_mutable_country() {
  
  return country_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Role::release_country() {
  // @@protoc_insertion_point(field_release:Database.Role.country)
  
  return country_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Role::set_allocated_country(std::string* country) {
  if (country != nullptr) {
    
  } else {
    
  }
  country_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), country);
  // @@protoc_insertion_point(field_set_allocated:Database.Role.country)
}

// string city = 7;
inline void Role::clear_city() {
  city_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Role::city() const {
  // @@protoc_insertion_point(field_get:Database.Role.city)
  return _internal_city();
}
inline void Role::set_city(const std::string& value) {
  _internal_set_city(value);
  // @@protoc_insertion_point(field_set:Database.Role.city)
}
inline std::string* Role::mutable_city() {
  // @@protoc_insertion_point(field_mutable:Database.Role.city)
  return _internal_mutable_city();
}
inline const std::string& Role::_internal_city() const {
  return city_.GetNoArena();
}
inline void Role::_internal_set_city(const std::string& value) {
  
  city_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Role::set_city(std::string&& value) {
  
  city_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Database.Role.city)
}
inline void Role::set_city(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  city_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Database.Role.city)
}
inline void Role::set_city(const char* value, size_t size) {
  
  city_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Database.Role.city)
}
inline std::string* Role::_internal_mutable_city() {
  
  return city_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Role::release_city() {
  // @@protoc_insertion_point(field_release:Database.Role.city)
  
  return city_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Role::set_allocated_city(std::string* city) {
  if (city != nullptr) {
    
  } else {
    
  }
  city_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), city);
  // @@protoc_insertion_point(field_set_allocated:Database.Role.city)
}

// int32 create_time = 8;
inline void Role::clear_create_time() {
  create_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Role::_internal_create_time() const {
  return create_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Role::create_time() const {
  // @@protoc_insertion_point(field_get:Database.Role.create_time)
  return _internal_create_time();
}
inline void Role::_internal_set_create_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  create_time_ = value;
}
inline void Role::set_create_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_create_time(value);
  // @@protoc_insertion_point(field_set:Database.Role.create_time)
}

// int32 login_time = 9;
inline void Role::clear_login_time() {
  login_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Role::_internal_login_time() const {
  return login_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Role::login_time() const {
  // @@protoc_insertion_point(field_get:Database.Role.login_time)
  return _internal_login_time();
}
inline void Role::_internal_set_login_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  login_time_ = value;
}
inline void Role::set_login_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_login_time(value);
  // @@protoc_insertion_point(field_set:Database.Role.login_time)
}

// int32 logout_time = 10;
inline void Role::clear_logout_time() {
  logout_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Role::_internal_logout_time() const {
  return logout_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Role::logout_time() const {
  // @@protoc_insertion_point(field_get:Database.Role.logout_time)
  return _internal_logout_time();
}
inline void Role::_internal_set_logout_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  logout_time_ = value;
}
inline void Role::set_logout_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_logout_time(value);
  // @@protoc_insertion_point(field_set:Database.Role.logout_time)
}

// int32 daily_reset_time = 11;
inline void Role::clear_daily_reset_time() {
  daily_reset_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Role::_internal_daily_reset_time() const {
  return daily_reset_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Role::daily_reset_time() const {
  // @@protoc_insertion_point(field_get:Database.Role.daily_reset_time)
  return _internal_daily_reset_time();
}
inline void Role::_internal_set_daily_reset_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  daily_reset_time_ = value;
}
inline void Role::set_daily_reset_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_daily_reset_time(value);
  // @@protoc_insertion_point(field_set:Database.Role.daily_reset_time)
}

// -------------------------------------------------------------------

// TimerField

// repeated .Database.MapII tfs = 1;
inline int TimerField::_internal_tfs_size() const {
  return tfs_.size();
}
inline int TimerField::tfs_size() const {
  return _internal_tfs_size();
}
inline void TimerField::clear_tfs() {
  tfs_.Clear();
}
inline ::Database::MapII* TimerField::mutable_tfs(int index) {
  // @@protoc_insertion_point(field_mutable:Database.TimerField.tfs)
  return tfs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Database::MapII >*
TimerField::mutable_tfs() {
  // @@protoc_insertion_point(field_mutable_list:Database.TimerField.tfs)
  return &tfs_;
}
inline const ::Database::MapII& TimerField::_internal_tfs(int index) const {
  return tfs_.Get(index);
}
inline const ::Database::MapII& TimerField::tfs(int index) const {
  // @@protoc_insertion_point(field_get:Database.TimerField.tfs)
  return _internal_tfs(index);
}
inline ::Database::MapII* TimerField::_internal_add_tfs() {
  return tfs_.Add();
}
inline ::Database::MapII* TimerField::add_tfs() {
  // @@protoc_insertion_point(field_add:Database.TimerField.tfs)
  return _internal_add_tfs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Database::MapII >&
TimerField::tfs() const {
  // @@protoc_insertion_point(field_list:Database.TimerField.tfs)
  return tfs_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Database

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_database_2eproto
